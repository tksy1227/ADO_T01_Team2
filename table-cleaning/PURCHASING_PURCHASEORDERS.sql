create or replace TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS (
	PURCHASEORDERID NUMBER(38,0) NOT NULL,
	SUPPLIERID VARCHAR(16777216),
	ORDERDATE VARCHAR(20),
	DELIVERYMETHODID VARCHAR(16777216),
	CONTACTPERSONID VARCHAR(20),
	EXPECTEDDELIVERYDATE VARCHAR(20),
	SUPPLIERREFERENCE VARCHAR(16777216),
	ISORDERFINALIZED BOOLEAN,
	primary key (PURCHASEORDERID)
	constraint FK_PURCHASING_PURCHASEORDERS_DELIVERYMETHODID_APPLICATION_DELIVERYMETHODS foreign key (DELIVERYMETHODID) references KN_LOGISTICS.SNOWSQL.APPLICATION_DELIVERYMETHODS(DELIVERYMETHODID),
	constraint FK_PURCHASING_PURCHASEORDERS_CONTACTPERSONID_APPLICATION_PEOPLE foreign key (CONTACTPERSONID) references KN_LOGISTICS.SNOWSQL.APPLICATION_PEOPLE(PERSONID)
	constraint FK_PURCHASING_PURCHASEORDERS_SUPPLIERID_PURCHASING_SUPPLIERS foreign key (SUPPLIERID) references KN_LOGISTICS.SNOWSQL.PURCHASING_SUPPLIERS(SUPPLIERID)
);


// Total Number of Null values in string 'NULL' for all columns except boolean column (ISORDERFINALISED)
SELECT COUNT(*) FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
WHERE SUPPLIERID = 'NULL'
OR ORDERDATE = 'NULL'
OR DELIVERYMETHODID = 'NULL'
OR CONTACTPERSONID = 'NULL'
OR EXPECTEDDELIVERYDATE = 'NULL'
OR SUPPLIERREFERENCE = 'NULL';

// Total Number of Null values for all columns
SELECT COUNT(*) FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
WHERE PURCHASEORDERID IS NULL
OR SUPPLIERID IS NULL
OR ORDERDATE IS NULL
OR DELIVERYMETHODID IS NULL
OR CONTACTPERSONID IS NULL
OR EXPECTEDDELIVERYDATE IS NULL
OR SUPPLIERREFERENCE IS NULL
OR ISORDERFINALIZED IS NULL;


// Null value checks for all columns (only varchar data type columns)
SELECT 
    SUM(CASE WHEN SUPPLIERID = 'NULL' THEN 1 ELSE 0 END) AS NULL_COUNT_SUPPLIERID,
    SUM(CASE WHEN ORDERDATE = 'NULL' THEN 1 ELSE 0 END) AS NULL_COUNT_ORDERDATE,
    SUM(CASE WHEN DELIVERYMETHODID = 'NULL' THEN 1 ELSE 0 END) AS NULL_COUNT_DELIVERYMETHODID,
    SUM(CASE WHEN CONTACTPERSONID = 'NULL' THEN 1 ELSE 0 END) AS NULL_COUNT_CONTACTPERSONID,
    SUM(CASE WHEN EXPECTEDDELIVERYDATE = 'NULL' THEN 1 ELSE 0 END) AS NULL_COUNT_EXPECTEDDELIVERYDATE,    
    SUM(CASE WHEN SUPPLIERREFERENCE = 'NULL' THEN 1 ELSE 0 END) AS NULL_COUNT_SUPPLIERREFERENCE
FROM 
    KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS;
    

// Null value checks for all columns (only numeric/boolean data type columns)
SELECT 
    COUNT(CASE WHEN ISORDERFINALIZED IS NULL THEN 1 END) AS count_ISORDERFINALIZED_NULL
FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS;

// Duplicated rows
SELECT PURCHASEORDERID, COUNT(*) AS count
FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
GROUP BY PURCHASEORDERID
HAVING COUNT(*) > 1;


//ORDERDATE
ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
ADD COLUMN ORDERDATE_DATE DATE;

// Change to date format for ORDERDATE column
UPDATE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
SET ORDERDATE_DATE = TO_DATE(ORDERDATE, 'DD/MM/YYYY');

SELECT ORDERDATE, ORDERDATE_DATE
FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
DROP COLUMN ORDERDATE;

ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
RENAME COLUMN ORDERDATE_DATE TO ORDERDATE;

// Check 10 rows of ORDERDATE after updating the data type
SELECT ORDERDATE FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS LIMIT 10;

// Check 10 rows of the whole table after updating the data type
SELECT * FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS;




// EXPECTEDDELIVERYDATE
ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
ADD COLUMN EXPECTEDDELIVERYDATE_DATE DATE;

// Change to date format for ORDERDATE column
UPDATE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
SET EXPECTEDDELIVERYDATE_DATE = TO_DATE(EXPECTEDDELIVERYDATE, 'DD/MM/YYYY');

SELECT EXPECTEDDELIVERYDATE, EXPECTEDDELIVERYDATE_DATE
FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
DROP COLUMN EXPECTEDDELIVERYDATE;

ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
RENAME COLUMN EXPECTEDDELIVERYDATE_DATE TO EXPECTEDDELIVERYDATE;

// Check 10 rows of EXPECTEDDELIVERYDATE after updating the data type
SELECT EXPECTEDDELIVERYDATE FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS LIMIT 10;

// Check 10 rows of the whole table after updating the data type
SELECT * FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS LIMIT 10;


// SUPPLIERID
ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
ADD COLUMN SUPPLIERID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
SET SUPPLIERID_NUM = TO_NUMBER(SUPPLIERID);

SELECT SUPPLIERID, SUPPLIERID_NUM
FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
DROP COLUMN SUPPLIERID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
RENAME COLUMN SUPPLIERID_NUM TO SUPPLIERID;

// Check 10 rows of SUPPLIERID after updating the data type
SELECT SUPPLIERID FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS LIMIT 10;

// Check 10 rows of the whole table after updating the data type
SELECT * FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS;

SELECT *
FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
WHERE SUPPLIERID = 7;

//check the number of rows of SUPPLIERID = 7(random SUPPLIERID from data), cross checked with excel sheet
SELECT COUNT(*) AS row_count
FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
WHERE SUPPLIERID = 7;


// PURCHASEORDERID
ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
ADD COLUMN PURCHASEORDERID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
SET PURCHASEORDERID_NUM = TO_NUMBER(PURCHASEORDERID);

SELECT PURCHASEORDERID, PURCHASEORDERID_NUM
FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
DROP COLUMN PURCHASEORDERID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
RENAME COLUMN PURCHASEORDERID_NUM TO PURCHASEORDERID;

// Check 10 rows of SUPPLIERID after updating the data type
SELECT PURCHASEORDERID FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS LIMIT 10;

// Check 10 rows of the whole table after updating the data type
SELECT * FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS;

SELECT *
FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
WHERE PURCHASEORDERID = 109;

//check the number of rows of PURCHASEORDERID = 109(random PURCHASEORDERID from data), cross checked with excel sheet
SELECT COUNT(*) AS row_count
FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
WHERE PURCHASEORDERID = 109;



// CONTACTPERSONID
ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
ADD COLUMN CONTACTPERSONID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
SET CONTACTPERSONID_NUM = TO_NUMBER(CONTACTPERSONID);

SELECT CONTACTPERSONID, CONTACTPERSONID_NUM
FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
DROP COLUMN CONTACTPERSONID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
RENAME COLUMN CONTACTPERSONID_NUM TO CONTACTPERSONID;

// Check 10 rows of SUPPLIERID after updating the data type
SELECT CONTACTPERSONID FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS LIMIT 10;

// Check 10 rows of the whole table after updating the data type
SELECT * FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS;

SELECT *
FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
WHERE CONTACTPERSONID = 2;

//check the number of rows of CONTACTPERSONID = 2(random CONTACTPERSONID from data), cross checked with excel sheet
SELECT COUNT(*) AS row_count
FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
WHERE CONTACTPERSONID = 2;



//DELIVERYMETHODID
ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
ADD COLUMN DELIVERYMETHODID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
SET DELIVERYMETHODID_NUM = TO_NUMBER(DELIVERYMETHODID);

SELECT DELIVERYMETHODID, DELIVERYMETHODID_NUM
FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
DROP COLUMN DELIVERYMETHODID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
RENAME COLUMN DELIVERYMETHODID_NUM TO DELIVERYMETHODID;

// Check 10 rows of SUPPLIERID after updating the data type
SELECT DELIVERYMETHODID FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS LIMIT 10;

// Check 10 rows of the whole table after updating the data type
SELECT * FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS;

SELECT *
FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
WHERE DELIVERYMETHODID = 2;

//check the number of rows of DELIVERYMETHODID = 1(random DELIVERYMETHODID from data), cross checked with excel sheet
SELECT COUNT(*) AS row_count
FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
WHERE DELIVERYMETHODID = 2;



-- FOREIGN KEYS
ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
ADD CONSTRAINT FK_Purchasing_PurchaseOrders_DeliveryMethodID_Application_DeliveryMethods
FOREIGN KEY (DeliveryMethodID)
REFERENCES KN_LOGISTICS.SNOWSQL.Application_DeliveryMethods(DeliveryMethodID);

ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
ADD CONSTRAINT FK_Purchasing_PurchaseOrders_ContactPersonID_Application_People
FOREIGN KEY (ContactPersonID)
REFERENCES KN_LOGISTICS.SNOWSQL.Application_People(PersonID);

ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS
ADD CONSTRAINT FK_Purchasing_PurchaseOrders_SupplierID_Purchasing_Suppliers
FOREIGN KEY (SupplierID)
REFERENCES KN_LOGISTICS.SNOWSQL.Purchasing_Suppliers(SupplierID);

ALTER TABLE KN_LOGISTICS.SNOWSQL.Purchasing_PurchaseOrderLines
ADD CONSTRAINT FK_Purchasing_PurchaseOrderLines_PurchaseOrderID_Purchasing_PurchaseOrders
FOREIGN KEY (PurchaseOrderID)
REFERENCES KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS(PurchaseOrderID);

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
ADD CONSTRAINT FK_Warehouse_StockItemTransactions_PurchaseOrderID_Purchasing_PurchaseOrders
FOREIGN KEY (PURCHASEORDERID)
REFERENCES KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS(PURCHASEORDERID);

ALTER TABLE KN_LOGISTICS.SNOWSQL.Purchasing_SupplierTransactions
ADD CONSTRAINT FK_Purchasing_SupplierTransactions_PurchaseOrderID_Purchasing_PurchaseOrders
FOREIGN KEY (PurchaseOrderID)
REFERENCES KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS(PurchaseOrderID);




SELECT 
    po.PurchaseOrderID,
    po.OrderDate,
    po.ExpectedDeliveryDate,
    po.DeliveryMethodID,
    dm.DeliveryMethodName,
    po.ContactPersonID,
    cp.PersonName AS ContactPersonName,
    po.LastEditedBy,
    le.PersonName AS LastEditedByName,
    po.SupplierID,
    s.SupplierName,
    pol.PurchaseOrderLineID,
    pol.StockItemID,
    sit.StockItemTransactionID,
    st.SupplierTransactionID
FROM 
    Purchasing.PurchaseOrders AS po
LEFT JOIN 
    Application.DeliveryMethods AS dm 
    ON po.DeliveryMethodID = dm.DeliveryMethodID
LEFT JOIN 
    Application.People AS cp 
    ON po.ContactPersonID = cp.PersonID
LEFT JOIN 
    Purchasing.Suppliers AS s 
    ON po.SupplierID = s.SupplierID
LEFT JOIN 
    Purchasing.PurchaseOrderLines AS pol 
    ON po.PurchaseOrderID = pol.PurchaseOrderID
LEFT JOIN 
     KN_LOGISTICS.SNOWSQL.Warehouse.StockItemTransactions AS sit 
    ON po.PurchaseOrderID = sit.PurchaseOrderID
LEFT JOIN 
     KN_LOGISTICS.SNOWSQL.Purchasing_SupplierTransactions AS st 
    ON po.PurchaseOrderID = st.PurchaseOrderID;
