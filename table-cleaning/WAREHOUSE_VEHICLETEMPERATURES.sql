-- Create a clean table with the same structure as the raw table
CREATE OR REPLACE TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_VEHICLETEMPERATURES AS
SELECT
  CAST(CASE WHEN VEHICLETEMPERATUREID = 'NULL' THEN NULL ELSE VEHICLETEMPERATUREID END AS VARCHAR(38)) AS VEHICLETEMPERATUREID,
  CAST(CASE WHEN VEHICLEREGISTRATION = 'NULL' THEN NULL ELSE VEHICLEREGISTRATION END AS VARCHAR(255)) AS VEHICLEREGISTRATION,
  CAST(CASE WHEN CHILLERSENSORNUMBER = 'NULL' THEN NULL ELSE CHILLERSENSORNUMBER END AS VARCHAR(38)) AS CHILLERSENSORNUMBER,
  CAST(CASE WHEN RECORDEDWHEN = 'NULL' THEN NULL ELSE RECORDEDWHEN END AS VARCHAR(25)) AS RECORDEDWHEN,
  CAST(CASE WHEN TEMPERATURE = 'NULL' THEN NULL ELSE TEMPERATURE END AS VARCHAR(38)) AS TEMPERATURE,
  CAST(CASE WHEN FULLSENSORDATA = 'NULL' THEN NULL ELSE FULLSENSORDATA END AS VARCHAR(1000)) AS FULLSENSORDATA
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_VEHICLETEMPERATURES_RAW;

-- Verify the clean table
SELECT *
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_VEHICLETEMPERATURES;

------------------------------------
--Conversion of datatype
------------------------------------
---------------VEHICLETEMPERATUREID----------------------------
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_VEHICLETEMPERATURES
ADD COLUMN VEHICLETEMPERATUREID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_VEHICLETEMPERATURES
SET VEHICLETEMPERATUREID_NUM = CAST(VEHICLETEMPERATUREID AS NUMBER(38,0));

SELECT VEHICLETEMPERATUREID_NUM, VEHICLETEMPERATUREID
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_VEHICLETEMPERATURES
LIMIT 10;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_VEHICLETEMPERATURES
DROP COLUMN VEHICLETEMPERATUREID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_VEHICLETEMPERATURES
RENAME COLUMN VEHICLETEMPERATUREID_NUM TO VEHICLETEMPERATUREID;


---------------------CHILLERSENSORNUMBER-----------------------
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_VEHICLETEMPERATURES
ADD COLUMN CHILLERSENSORNUMBER_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_VEHICLETEMPERATURES
SET CHILLERSENSORNUMBER_NUM = CAST(CHILLERSENSORNUMBER AS NUMBER(38,0));

SELECT CHILLERSENSORNUMBER_NUM, CHILLERSENSORNUMBER
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_VEHICLETEMPERATURES
LIMIT 10;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_VEHICLETEMPERATURES
DROP COLUMN CHILLERSENSORNUMBER;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_VEHICLETEMPERATURES
RENAME COLUMN CHILLERSENSORNUMBER_NUM TO CHILLERSENSORNUMBER;


--------------------TEMPERATURE-----------------------------------
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_VEHICLETEMPERATURES
ADD COLUMN TEMPERATURE_DECIMAL DECIMAL(10,2);

UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_VEHICLETEMPERATURES
SET TEMPERATURE_DECIMAL = CAST(TEMPERATURE AS DECIMAL(10,2));

SELECT TEMPERATURE_DECIMAL, TEMPERATURE
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_VEHICLETEMPERATURES
LIMIT 10;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_VEHICLETEMPERATURES
DROP COLUMN TEMPERATURE;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_VEHICLETEMPERATURES
RENAME COLUMN TEMPERATURE_DECIMAL TO TEMPERATURE;


---------------------RECORDEDWHEN-----------------------------------
--------------------------------------------------
// data type conversion (to timestamp)
--------------------------------------------------
// TRANSACTIONOCCURREDWHEN
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_VEHICLETEMPERATURES
ADD COLUMN RECORDEDWHEN_DATE TIMESTAMP;

// Change to date format for ORDERDATE column
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_VEHICLETEMPERATURES
SET RECORDEDWHEN_DATE = TO_TIMESTAMP(RECORDEDWHEN,'DD/MM/YYYY HH24:MI');

SELECT RECORDEDWHEN, RECORDEDWHEN_DATE
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_VEHICLETEMPERATURES;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_VEHICLETEMPERATURES
DROP COLUMN RECORDEDWHEN;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_VEHICLETEMPERATURES
RENAME COLUMN RECORDEDWHEN_DATE TO RECORDEDWHEN;

// Check 10 rows of TRANSACTIONOCCURREDWHEN after updating the data type
SELECT RECORDEDWHEN FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_VEHICLETEMPERATURES LIMIT 10;

// Check 10 rows of the whole table after updating the data type
SELECT * FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_VEHICLETEMPERATURES LIMIT 10;




// Check 10 rows of the whole table after updating the data type
SELECT * FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_VEHICLETEMPERATURES;
SELECT 
    VEHICLETEMPERATUREID,
    CHILLERSENSORNUMBER,
    TEMPERATURE,
    RECORDEDWHEN
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_VEHICLETEMPERATURES
LIMIT 20;


-------------------------------------------
--Addition of primary key to table
-------------------------------------------

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_VEHICLETEMPERATURES
ADD CONSTRAINT PK_WAREHOUSE_VEHICLETEMPERATURES_VEHICLETEMPERATUREID
PRIMARY KEY (VEHICLETEMPERATUREID);

-------------------------------------------------------
-- ERROR HANDLING 
-------------------------------------------------------
WITH CTE AS (
    SELECT 
        VEHICLETEMPERATUREID,
        VEHICLEREGISTRATION,
        CHILLERSENSORNUMBER,
        RECORDEDWHEN,
        TEMPERATURE,
        FULLSENSORDATA,
        LAG(VEHICLETEMPERATUREID) OVER (ORDER BY VEHICLETEMPERATUREID) AS prev_vehicletemperatureid,
        ROW_NUMBER() OVER (ORDER BY VEHICLETEMPERATUREID) AS row_num
    FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_VEHICLETEMPERATURES
)
SELECT 
        VEHICLEREGISTRATION,
        CHILLERSENSORNUMBER,
        RECORDEDWHEN,
        TEMPERATURE,
        FULLSENSORDATA,
    CASE
        WHEN VEHICLETEMPERATUREID IS NULL THEN prev_vehicletemperatureid + 1
        ELSE VEHICLETEMPERATUREID
    END AS VEHICLETEMPERATUREID

FROM CTE
ORDER BY row_num;

-------------------------------------------------------
--Adding of foreign key to table
-------------------------------------------------------
--  THERE ARE NO FOREIGN KEYS IN THIS TABLE
