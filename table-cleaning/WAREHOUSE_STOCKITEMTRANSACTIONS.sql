create or replace TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS (
	STOCKITEMTRANSACTIONID NUMBER(38,0) NOT NULL,
	STOCKITEMID NUMBER(38,0),
	TRANSACTIONTYPEID NUMBER(38,0),
	CUSTOMERID VARCHAR(16777216),
	INVOICEID VARCHAR(20),
	SUPPLIERID VARCHAR(16777216),
	PURCHASEORDERID VARCHAR(20),
	TRANSACTIONOCCURREDWHEN VARCHAR(16777216),
	QUANTITY FLOAT,
	constraint PK_STOCKITEMTRANSACTIONS primary key (STOCKITEMTRANSACTIONID),
	constraint FK_WAREHOUSE_STOCKITEMTRANSACTIONS_PURCHASEORDERID_PURCHASING_PURCHASEORDERS foreign key (PURCHASEORDERID) references KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS(PURCHASEORDERID),
	constraint FK_WAREHOUSE_STOCKITEMTRANSACTIONS_STOCKITEMID_WAREHOUSE_STOCKITEMS foreign key (STOCKITEMID) references KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS(STOCKITEMID),
	constraint FK_WAREHOUSE_STOCKITEMTRANSACTIONS_CUSTOMERID_SALES_CUSTOMERS foreign key (CUSTOMERID) references KN_LOGISTICS.SNOWSQL.SALES_CUSTOMERS(CUSTOMERID),
	constraint FK_WAREHOUSE_STOCKITEMTRANSACTIONS_SUPPLIERID_PURCHASING_SUPPLIERS foreign key (SUPPLIERID) references KN_LOGISTICS.SNOWSQL.PURCHASING_SUPPLIERS(SUPPLIERID),
    constraint FK_WAREHOUSE_STOCKITEMTRANSACTIONS_TRANSACTIONTYPEID_APPLICATION_TRANSACTIONTYPES foreign key (TRANSACTIONTYPEID) references KN_LOGISTICS.SNOWSQL.APPLICATION_TRANSACTIONTYPES(TRANSACTIONTYPEID),
	constraint FK_WAREHOUSE_STOCKITEMTRANSACTIONS_INVOICEID_SALES_INVOICES foreign key (INVOICEID) references KN_LOGISTICS.SNOWSQL.SALES_INVOICES(INVOICEID)
);

-- Handle remaining NULL values in CUSTOMERID
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
SET CUSTOMERID = NULL -- oTHERS
WHERE CUSTOMERID = 'NULL';

-- Handle remaining NULL values in INVOICEID
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
SET INVOICEID = NULL -- oTHERS
WHERE INVOICEID = 'NULL';

-- Handle remaining NULL values in SUPPLIERID
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
SET SUPPLIERID = NULL -- oTHERS
WHERE SUPPLIERID = 'NULL';

-- Handle remaining NULL values in PURCHASEORDERID
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
SET PURCHASEORDERID = NULL -- oTHERS
WHERE PURCHASEORDERID = 'NULL';

// Check 20 rows of the whole table after updating the nulls
SELECT * FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS LIMIT 20;

// Total Number of Null values in string 'NULL' for all columns
SELECT COUNT(*) FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS 
WHERE CUSTOMERID = 'NULL'
OR INVOICEID = 'NULL'
OR SUPPLIERID = 'NULL'
OR PURCHASEORDERID = 'NULL'
OR TRANSACTIONOCCURREDWHEN = 'NULL';

// Total Number of Null values in string 'NULL' for all columns
SELECT COUNT(*) FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS 
WHERE STOCKITEMTRANSACTIONID IS NULL
OR STOCKITEMID IS NULL
OR TRANSACTIONTYPEID IS NULL
OR CUSTOMERID IS NULL
OR INVOICEID IS NULL
OR SUPPLIERID IS NULL
OR PURCHASEORDERID IS NULL
OR TRANSACTIONOCCURREDWHEN IS NULL
OR QUANTITY IS NULL;


// Null value checks for all columns (only varchar data type columns)
SELECT 
    SUM(CASE WHEN CUSTOMERID = 'NULL' THEN 1 ELSE 0 END) AS NULL_COUNT_CUSTOMERID,
    SUM(CASE WHEN INVOICEID = 'NULL' THEN 1 ELSE 0 END) AS NULL_COUNT_INVOICEID,
    SUM(CASE WHEN SUPPLIERID = 'NULL' THEN 1 ELSE 0 END) AS NULL_COUNT_SUPPLIERID,
    SUM(CASE WHEN PURCHASEORDERID = 'NULL' THEN 1 ELSE 0 END) AS NULL_COUNT_PURCHASEORDERID,
    SUM(CASE WHEN TRANSACTIONOCCURREDWHEN = 'NULL' THEN 1 ELSE 0 END) AS NULL_COUNT_TRANSACTIONOCCURREDWHEN,
FROM 
    KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS;
    

// Null value checks for all columns (only numeric data type columns)
SELECT 
    COUNT(CASE WHEN STOCKITEMTRANSACTIONID IS NULL THEN 1 END) AS count_STOCKITEMTRANSACTIONID_NULL,
    COUNT(CASE WHEN STOCKITEMID IS NULL THEN 1 END) AS count_STOCKITEMID_NULL,
    COUNT(CASE WHEN TRANSACTIONTYPEID IS NULL THEN 1 END) AS count_TRANSACTIONTYPEID_NULL,
    COUNT(CASE WHEN QUANTITY IS NULL THEN 1 END) AS count_QUANTITY_NULL,
    COUNT(CASE WHEN CUSTOMERID IS NULL THEN 1 END) AS count_CUSTOMERID_NULL,
    COUNT(CASE WHEN INVOICEID IS NULL THEN 1 END) AS count_INVOICEID_NULL,
    COUNT(CASE WHEN SUPPLIERID IS NULL THEN 1 END) AS count_SUPPLIERID_NULL,
    COUNT(CASE WHEN PURCHASEORDERID IS NULL THEN 1 END) AS count_PURCHASEORDERID_NULL,
    COUNT(CASE WHEN TRANSACTIONOCCURREDWHEN IS NULL THEN 1 END) AS count_TRANSACTIONOCCURREDWHEN_NULL,
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS;

// Duplicated rows
SELECT STOCKITEMTRANSACTIONID, COUNT(*) AS count
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
GROUP BY STOCKITEMTRANSACTIONID
HAVING COUNT(*) > 1;


// TRANSACTIONOCCURREDWHEN
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
ADD COLUMN TRANSACTIONOCCURREDWHEN_DATE TIMESTAMP;

// Change to date format for ORDERDATE column
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
SET TRANSACTIONOCCURREDWHEN_DATE = TO_TIMESTAMP(TRANSACTIONOCCURREDWHEN, 'DD/MM/YYYY HH24:MI');

SELECT TRANSACTIONOCCURREDWHEN, TRANSACTIONOCCURREDWHEN_DATE
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
DROP COLUMN TRANSACTIONOCCURREDWHEN;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
RENAME COLUMN TRANSACTIONOCCURREDWHEN_DATE TO TRANSACTIONOCCURREDWHEN;

// Check 10 rows of TRANSACTIONOCCURREDWHEN after updating the data type
SELECT TRANSACTIONOCCURREDWHEN FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS LIMIT 10;

// Check 10 rows of the whole table after updating the data type
SELECT * FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS LIMIT 10;



//CUSTOMERID
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
ADD COLUMN CUSTOMERID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
SET CUSTOMERID_NUM = TO_NUMBER(CUSTOMERID);

SELECT CUSTOMERID, CUSTOMERID_NUM
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
DROP COLUMN CUSTOMERID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
RENAME COLUMN CUSTOMERID_NUM TO CUSTOMERID;

// Check 10 rows of CUSTOMERID after updating the data type
SELECT CUSTOMERID FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS LIMIT 10;

// Check 10 rows of the whole table after updating the data type
SELECT * FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS;

SELECT *
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
WHERE CUSTOMERID = 832;

//check the number of rows of customerid = 832(random customerid from data), cross checked with excel sheet
SELECT COUNT(*) AS row_count
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
WHERE CUSTOMERID = 832;



//INVOICEID
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
ADD COLUMN INVOICEID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
SET INVOICEID_NUM = TO_NUMBER(INVOICEID);

SELECT INVOICEID, INVOICEID_NUM
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
DROP COLUMN INVOICEID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
RENAME COLUMN INVOICEID_NUM TO INVOICEID;

// Check 10 rows of INVOICEID after updating the data type
SELECT INVOICEID FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS LIMIT 10;

// Check 10 rows of the whole table after updating the data type
SELECT * FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS;

SELECT *
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
WHERE INVOICEID = 103;

//check the number of rows of customerid = 103(random invoiceid from data), cross checked with excel sheet
SELECT COUNT(*) AS row_count
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
WHERE INVOICEID = 103;



//SUPPLIERID
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
ADD COLUMN SUPPLIERID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
SET SUPPLIERID_NUM = TO_NUMBER(SUPPLIERID);

SELECT SUPPLIERID, SUPPLIERID_NUM
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
DROP COLUMN SUPPLIERID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
RENAME COLUMN SUPPLIERID_NUM TO SUPPLIERID;

// Check 10 rows of SUPPLIERID after updating the data type
SELECT SUPPLIERID FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS LIMIT 10;

// Check 10 rows of the whole table after updating the data type
SELECT * FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS;

SELECT *
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
WHERE SUPPLIERID = 12;

//check the number of rows of SUPPLIERID = 12(random SUPPLIERID from data), cross checked with excel sheet
SELECT COUNT(*) AS row_count
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
WHERE SUPPLIERID = 12;



//PURCHASEORDERID
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
ADD COLUMN PURCHASEORDERID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
SET PURCHASEORDERID_NUM = TO_NUMBER(PURCHASEORDERID);

SELECT PURCHASEORDERID, PURCHASEORDERID_NUM
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
DROP COLUMN PURCHASEORDERID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
RENAME COLUMN PURCHASEORDERID_NUM TO PURCHASEORDERID;

// Check 10 rows of SUPPLIERID after updating the data type
SELECT PURCHASEORDERID FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS LIMIT 10;

// Check 10 rows of the whole table after updating the data type
SELECT * FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS;

SELECT *
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
WHERE PURCHASEORDERID = 109;

//check the number of rows of PURCHASEORDERID = 109(random PURCHASEORDERID from data), cross checked with excel sheet
SELECT COUNT(*) AS row_count
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
WHERE PURCHASEORDERID = 109;




SELECT 
    sit.StockItemTransactionID,
    sit.StockItemID,
    si.StockItemName,
    sit.TransactionTypeID,
    tt.TransactionTypeName,
    sit.CustomerID,
    c.CustomerName,
    sit.InvoiceID,
    i.InvoiceDate,
    sit.PurchaseOrderID,
    po.OrderDate,
    sit.SupplierID,
    s.SupplierName
FROM 
    KN_LOGISTICS.SNOWSQL.Warehouse_StockItemTransactions AS sit
LEFT JOIN 
    KN_LOGISTICS.SNOWSQL.Sales_Customers AS c 
    ON sit.CustomerID = c.CustomerID
LEFT JOIN 
    KN_LOGISTICS.SNOWSQL.Sales_Invoices AS i 
    ON sit.InvoiceID = i.InvoiceID
LEFT JOIN 
    KN_LOGISTICS.SNOWSQL.Purchasing_PurchaseOrders AS po 
    ON sit.PurchaseOrderID = po.PurchaseOrderID
LEFT JOIN 
    KN_LOGISTICS.SNOWSQL.Warehouse_StockItems AS si 
    ON sit.StockItemID = si.StockItemID
LEFT JOIN 
    KN_LOGISTICS.SNOWSQL.Purchasing_Suppliers AS s 
    ON sit.SupplierID = s.SupplierID
LEFT JOIN 
    KN_LOGISTICS.SNOWSQL.Application_TransactionTypes AS tt 
    ON sit.TransactionTypeID = tt.TransactionTypeID;
