-- Create a clean table with the same structure as the raw table but we pull data from the raw table into this table (final table)
CREATE OR REPLACE TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS AS
SELECT
  CAST(CASE WHEN STOCKITEMTRANSACTIONID = 'NULL' THEN NULL ELSE STOCKITEMTRANSACTIONID END AS VARCHAR(38)) AS STOCKITEMTRANSACTIONID,
  CAST(CASE WHEN STOCKITEMID = 'NULL' THEN NULL ELSE STOCKITEMID END AS VARCHAR(38)) AS STOCKITEMID,
  CAST(CASE WHEN TRANSACTIONTYPEID = 'NULL' THEN NULL ELSE TRANSACTIONTYPEID END AS VARCHAR(38)) AS TRANSACTIONTYPEID,
  CAST(CASE WHEN CUSTOMERID = 'NULL' THEN NULL ELSE CUSTOMERID END AS VARCHAR(38)) AS CUSTOMERID,
  CAST(CASE WHEN INVOICEID = 'NULL' THEN NULL ELSE INVOICEID END AS VARCHAR(38)) AS INVOICEID,
  CAST(CASE WHEN SUPPLIERID = 'NULL' THEN NULL ELSE SUPPLIERID END AS VARCHAR(38)) AS SUPPLIERID,
  CAST(CASE WHEN PURCHASEORDERID = 'NULL' THEN NULL ELSE PURCHASEORDERID END AS VARCHAR(38)) AS PURCHASEORDERID,
  CAST(CASE WHEN TRANSACTIONOCCURREDWHEN = 'NULL' THEN NULL ELSE TRANSACTIONOCCURREDWHEN END AS VARCHAR(25)) AS TRANSACTIONOCCURREDWHEN,
  CAST(CASE WHEN QUANTITY = 'NULL' THEN NULL ELSE QUANTITY END AS VARCHAR(38)) AS QUANTITY
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS_RAW;


-- Null value checks for all columns
SELECT 
    SUM(CASE WHEN CUSTOMERID IS NULL THEN 1 END) AS NULL_COUNT_CUSTOMERID,
    SUM(CASE WHEN INVOICEID IS NULL THEN 1 END) AS NULL_COUNT_INVOICEID,
    SUM(CASE WHEN SUPPLIERID IS NULL THEN 1 END) AS NULL_COUNT_SUPPLIERID,
    SUM(CASE WHEN PURCHASEORDERID IS NULL THEN 1 END) AS NULL_COUNT_PURCHASEORDERID,
    SUM(CASE WHEN TRANSACTIONOCCURREDWHEN IS NULL THEN 1 END) AS NULL_COUNT_TRANSACTIONOCCURREDWHEN,
FROM 
    KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS;
    

-- Null value checks for all columns (only numeric data type columns)
SELECT 
    COUNT(CASE WHEN STOCKITEMTRANSACTIONID IS NULL THEN 1 END) AS count_STOCKITEMTRANSACTIONID_NULL,
    COUNT(CASE WHEN STOCKITEMID IS NULL THEN 1 END) AS count_STOCKITEMID_NULL,
    COUNT(CASE WHEN TRANSACTIONTYPEID IS NULL THEN 1 END) AS count_TRANSACTIONTYPEID_NULL,
    COUNT(CASE WHEN QUANTITY IS NULL THEN 1 END) AS count_QUANTITY_NULL,
    COUNT(CASE WHEN CUSTOMERID IS NULL THEN 1 END) AS count_CUSTOMERID_NULL,
    COUNT(CASE WHEN INVOICEID IS NULL THEN 1 END) AS count_INVOICEID_NULL,
    COUNT(CASE WHEN SUPPLIERID IS NULL THEN 1 END) AS count_SUPPLIERID_NULL,
    COUNT(CASE WHEN PURCHASEORDERID IS NULL THEN 1 END) AS count_PURCHASEORDERID_NULL,
    COUNT(CASE WHEN TRANSACTIONOCCURREDWHEN IS NULL THEN 1 END) AS count_TRANSACTIONOCCURREDWHEN_NULL,
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS;

----------------------------------------------------------
-- STOCKITEMID
-----------------------------------------------------------
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
ADD COLUMN STOCKITEMID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
SET STOCKITEMID_NUM = TO_NUMBER(STOCKITEMID);

SELECT STOCKITEMID, STOCKITEMID_NUM
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
DROP COLUMN STOCKITEMID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
RENAME COLUMN STOCKITEMID_NUM TO STOCKITEMID;

------------------------------------------------------
-- STOCKITEMTRANSACTIONID
------------------------------------------------------
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
ADD COLUMN STOCKITEMTRANSACTIONID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
SET STOCKITEMTRANSACTIONID_NUM = TO_NUMBER(STOCKITEMTRANSACTIONID);

SELECT STOCKITEMTRANSACTIONID, STOCKITEMTRANSACTIONID_NUM
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
DROP COLUMN STOCKITEMTRANSACTIONID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
RENAME COLUMN STOCKITEMTRANSACTIONID_NUM TO STOCKITEMTRANSACTIONID;

---------------------------------------------------------
-- TRANSACTIONTYPEID
----------------------------------------------------------
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
ADD COLUMN TRANSACTIONTYPEID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
SET TRANSACTIONTYPEID_NUM = TO_NUMBER(TRANSACTIONTYPEID);

SELECT TRANSACTIONTYPEID, TRANSACTIONTYPEID_NUM
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
DROP COLUMN TRANSACTIONTYPEID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
RENAME COLUMN TRANSACTIONTYPEID_NUM TO TRANSACTIONTYPEID;

--------------------------------------------------------
-- TRANSACTIONOCCURREDWHEN
-------------------------------------------------------
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
ADD COLUMN TRANSACTIONOCCURREDWHEN_DATE TIMESTAMP;

-- Change to date format for ORDERDATE column
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
SET TRANSACTIONOCCURREDWHEN_DATE = TO_TIMESTAMP(TRANSACTIONOCCURREDWHEN, 'DD/MM/YYYY HH24:MI');

SELECT TRANSACTIONOCCURREDWHEN, TRANSACTIONOCCURREDWHEN_DATE
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
DROP COLUMN TRANSACTIONOCCURREDWHEN;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
RENAME COLUMN TRANSACTIONOCCURREDWHEN_DATE TO TRANSACTIONOCCURREDWHEN;

--------------------------------------------
--CUSTOMERID
----------------------------------------------
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
ADD COLUMN CUSTOMERID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
SET CUSTOMERID_NUM = TO_NUMBER(CUSTOMERID);

SELECT CUSTOMERID, CUSTOMERID_NUM
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
DROP COLUMN CUSTOMERID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
RENAME COLUMN CUSTOMERID_NUM TO CUSTOMERID;

--check the number of rows of customerid = 832(random customerid from data), cross checked with excel sheet
SELECT COUNT(*) AS row_count
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
WHERE CUSTOMERID = 832;


---------------------------------------------------------------
//INVOICEID
----------------------------------------------------------------
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
ADD COLUMN INVOICEID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
SET INVOICEID_NUM = TO_NUMBER(INVOICEID);

SELECT INVOICEID, INVOICEID_NUM
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
DROP COLUMN INVOICEID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
RENAME COLUMN INVOICEID_NUM TO INVOICEID;

--check the number of rows of customerid = 103(random invoiceid from data), cross checked with excel sheet
SELECT COUNT(*) AS row_count
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
WHERE INVOICEID = 103;


----------------------------------------------------------
--SUPPLIERID
----------------------------------------------------------
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
ADD COLUMN SUPPLIERID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
SET SUPPLIERID_NUM = TO_NUMBER(SUPPLIERID);

SELECT SUPPLIERID, SUPPLIERID_NUM
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
DROP COLUMN SUPPLIERID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
RENAME COLUMN SUPPLIERID_NUM TO SUPPLIERID;

--check the number of rows of SUPPLIERID = 12(random SUPPLIERID from data), cross checked with excel sheet
SELECT COUNT(*) AS row_count
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
WHERE SUPPLIERID = 12;


---------------------------------------------------
--PURCHASEORDERID
---------------------------------------------------
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
ADD COLUMN PURCHASEORDERID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
SET PURCHASEORDERID_NUM = TO_NUMBER(PURCHASEORDERID);

SELECT PURCHASEORDERID, PURCHASEORDERID_NUM
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
DROP COLUMN PURCHASEORDERID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
RENAME COLUMN PURCHASEORDERID_NUM TO PURCHASEORDERID;

--check the number of rows of PURCHASEORDERID = 109(random PURCHASEORDERID from data), cross checked with excel sheet
SELECT COUNT(*) AS row_count
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
WHERE PURCHASEORDERID = 109;


----------------------------------------------------
-- QUANTITY
-------------------------------------------------
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
ADD COLUMN QUANTITY_NUM DECIMAL(18, 3);

UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
SET QUANTITY_NUM = TO_DECIMAL(QUANTITY, 18, 3);

SELECT QUANTITY, QUANTITY_NUM
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
DROP COLUMN QUANTITY;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
RENAME COLUMN QUANTITY_NUM TO QUANTITY;

SELECT * FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS LIMIT 10;


-- primary key
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMTRANSACTIONS
ADD CONSTRAINT PK_WAREHOUSE_STOCKITEMTRANSACTIONS_STOCKITEMID
PRIMARY KEY (STOCKITEMID);


-- null error handling for primary key (increment 1 to impute null value primary keys from the previous record)
WITH CTE AS (
    SELECT 
        StockItemTransactionID,
        StockItemID,
        TransactionTypeID,
        CustomerID,
        InvoiceID,
        SupplierID,
        PurchaseOrderID,
        TransactionOccurredWhen,
        Quantity,
        LAG(StockItemTransactionID) OVER (ORDER BY StockItemTransactionID) AS prev_transactionid,
        ROW_NUMBER() OVER (ORDER BY StockItemTransactionID) AS row_num
    FROM KN_LOGISTICS.SNOWSQL.Warehouse_StockItemTransactions
)
SELECT 
    StockItemID,
    TransactionTypeID,
    CustomerID,
    InvoiceID,
    SupplierID,
    PurchaseOrderID,
    TransactionOccurredWhen,
    Quantity,
    CASE
        WHEN StockItemTransactionID IS NULL THEN prev_transactionid + 1
        ELSE StockItemTransactionID
    END AS StockItemTransactionID
FROM CTE
ORDER BY row_num;


-- done foreign keys

-- Foreign key for CustomerID
ALTER TABLE KN_LOGISTICS.SNOWSQL.Warehouse_StockItemTransactions
ADD CONSTRAINT FK_Warehouse_StockItemTransactions_CustomerID_Sales_Customers
FOREIGN KEY (CustomerID)
REFERENCES KN_LOGISTICS.SNOWSQL.Sales_Customers (CustomerID);

-- Foreign key for PurchaseOrderID
ALTER TABLE KN_LOGISTICS.SNOWSQL.Warehouse_StockItemTransactions
ADD CONSTRAINT FK_Warehouse_StockItemTransactions_PurchaseOrderID_Purchasing_PurchaseOrders
FOREIGN KEY (PurchaseOrderID)
REFERENCES KN_LOGISTICS.SNOWSQL.Purchasing_PurchaseOrders (PurchaseOrderID);

-- Foreign key for StockItemID
ALTER TABLE KN_LOGISTICS.SNOWSQL.Warehouse_StockItemTransactions
ADD CONSTRAINT FK_Warehouse_StockItemTransactions_StockItemID_Warehouse_StockItems
FOREIGN KEY (StockItemID)
REFERENCES KN_LOGISTICS.SNOWSQL.Warehouse_StockItems (StockItemID);

-- Foreign key for SupplierID
ALTER TABLE KN_LOGISTICS.SNOWSQL.Warehouse_StockItemTransactions
ADD CONSTRAINT FK_Warehouse_StockItemTransactions_SupplierID_Purchasing_Suppliers
FOREIGN KEY (SupplierID)
REFERENCES KN_LOGISTICS.SNOWSQL.Purchasing_Suppliers (SupplierID);

-- Foreign key for InvoiceID
ALTER TABLE KN_LOGISTICS.SNOWSQL.Warehouse_StockItemTransactions
ADD CONSTRAINT FK_Warehouse_StockItemTransactions_InvoiceID_Sales_Invoices
FOREIGN KEY (InvoiceID)
REFERENCES KN_LOGISTICS.SNOWSQL.Sales_Invoices (InvoiceID);

-- Foreign key for TransactionTypeID
ALTER TABLE KN_LOGISTICS.SNOWSQL.Warehouse_StockItemTransactions
ADD CONSTRAINT FK_Warehouse_StockItemTransactions_TransactionTypeID_Application_TransactionTypes
FOREIGN KEY (TransactionTypeID)
REFERENCES KN_LOGISTICS.SNOWSQL.Application_TransactionTypes (TransactionTypeID);
