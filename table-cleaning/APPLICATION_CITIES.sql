
-- Verify the clean table
SELECT *
FROM KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES;

--------------------------------------------------------------
--CONVERSION OF DATATYPES 
--------------------------------------------------------------
// CITYID
ALTER TABLE KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES
ADD COLUMN CITYID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES
SET CITYID_NUM = TO_NUMBER(CITYID);

SELECT CITYID, CITYID_NUM
FROM KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES;

ALTER TABLE KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES
DROP COLUMN CITYID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES
RENAME COLUMN CITYID_NUM TO CITYID;
// Check 10 rows of SUPPLIERID after updating the data type
SELECT CITYID FROM KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES LIMIT 10;

// Check 10 rows of the whole table after updating the data type
SELECT * FROM KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES;

// COUNTRYID
ALTER TABLE KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES
ADD COLUMN COUNTRYID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES
SET COUNTRYID_NUM = TO_NUMBER(COUNTRYID);

SELECT COUNTRYID, COUNTRYID_NUM
FROM KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES;

ALTER TABLE KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES
DROP COLUMN COUNTRYID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES
RENAME COLUMN COUNTRYID_NUM TO COUNTRYID;
// Check 10 rows of SUPPLIERID after updating the data type
SELECT COUNTRYID FROM KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES LIMIT 10;

// LATITUDE
ALTER TABLE KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES
ADD COLUMN LATITUDE_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES
SET LATITUDE_NUM = TO_NUMBER(LATITUDE);

SELECT LATITUDE, LATITUDE_NUM
FROM KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES;

ALTER TABLE KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES
DROP COLUMN LATITUDE;

ALTER TABLE KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES
RENAME COLUMN LATITUDE_NUM TO LATITUDE;
// Check 10 rows of SUPPLIERID after updating the data type
SELECT LATITUDE FROM KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES LIMIT 10;

// LONGITUDE
ALTER TABLE KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES
ADD COLUMN LONGITUDE_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES
SET LONGITUDE_NUM = TO_NUMBER(LONGITUDE);

SELECT LONGITUDE, LONGITUDE_NUM
FROM KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES;

ALTER TABLE KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES
DROP COLUMN LONGITUDE;

ALTER TABLE KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES
RENAME COLUMN LONGITUDE_NUM TO LONGITUDE;
// Check 10 rows of SUPPLIERID after updating the data type
SELECT LONGITUDE FROM KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES LIMIT 10;

// LATESTRECORDEDPOPULATION
ALTER TABLE KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES
ADD COLUMN LATESTRECORDEDPOPULATION_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES
SET LATESTRECORDEDPOPULATION_NUM = TO_NUMBER(LATESTRECORDEDPOPULATION);

SELECT LATESTRECORDEDPOPULATION, LATESTRECORDEDPOPULATION_NUM
FROM KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES;

ALTER TABLE KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES
DROP COLUMN LATESTRECORDEDPOPULATION;

ALTER TABLE KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES
RENAME COLUMN LATESTRECORDEDPOPULATION_NUM TO LATESTRECORDEDPOPULATION;
// Check 10 rows of SUPPLIERID after updating the data type
SELECT LATESTRECORDEDPOPULATION FROM KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES LIMIT 10;

--------------------------------------------------------------
--ADDING OF PRIMARY KEYS TO TABLE
--------------------------------------------------------------
ALTER TABLE KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES
ADD CONSTRAINT PK_APPLICATION_CITIES_CITYID
PRIMARY KEY (CITYID);

--------------------------------------------------------------
--ERROR HANDLING
--------------------------------------------------------------
WITH CTE AS (
    SELECT 
        CITYID, 
        CITYNAME, 
        COUNTRYID,
        LATITUDE,
        LONGITUDE,
        LATESTRECORDEDPOPULATION,
        LAG(CITYID) OVER (ORDER BY CITYID) AS prev_cityid,
        ROW_NUMBER() OVER (ORDER BY CITYID) AS row_num
    FROM KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES
)
SELECT 
        CITYNAME, 
        COUNTRYID,
        LATITUDE,
        LONGITUDE,
        LATESTRECORDEDPOPULATION,
    CASE
        WHEN CITYID IS NULL THEN prev_cityid + 1
        ELSE CITYID
    END AS CITYID
FROM CTE
ORDER BY row_num;


-------------------------------------------------------
--Adding of foreign key to table
-------------------------------------------------------

-- Foreign Key: APPLICATION_CITIES.COUNTRYID -> APPLICATION_COUNTRIES_SEA.COUNTRYID
ALTER TABLE KN_LOGISTICS.SNOWSQL.APPLICATION_CITIES
ADD CONSTRAINT FK_APPLICATION_CITIES_COUNTRYID_APPLICATION_COUNTRIES_SEA
FOREIGN KEY (COUNTRYID)
REFERENCES KN_LOGISTICS.SNOWSQL.APPLICATION_COUNTRIES_SEA(COUNTRYID);

SELECT * FROM APPLICATION_CITIES LIMIT 20

