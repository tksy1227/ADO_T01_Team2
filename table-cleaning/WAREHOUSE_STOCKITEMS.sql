-- Create a clean table with the same structure as the raw table but we pull data from the raw table into this table (final table)
CREATE OR REPLACE TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS AS
SELECT
  CAST(CASE WHEN STOCKITEMID = 'NULL' THEN NULL ELSE STOCKITEMID END AS VARCHAR(38)) AS STOCKITEMID,
  CAST(CASE WHEN STOCKITEMNAME = 'NULL' THEN NULL ELSE STOCKITEMNAME END AS VARCHAR(100)) AS STOCKITEMNAME,
  CAST(CASE WHEN SUPPLIERID = 'NULL' THEN NULL ELSE SUPPLIERID END AS VARCHAR(38)) AS SUPPLIERID,
  CAST(CASE WHEN COLORID = 'NULL' THEN NULL ELSE COLORID END AS VARCHAR(38)) AS COLORID,
  CAST(CASE WHEN UNITPACKAGEID = 'NULL' THEN NULL ELSE UNITPACKAGEID END AS VARCHAR(38)) AS UNITPACKAGEID,
  CAST(CASE WHEN OUTERPACKAGEID = 'NULL' THEN NULL ELSE OUTERPACKAGEID END AS VARCHAR(38)) AS OUTERPACKAGEID,
  CAST(CASE WHEN BRAND = 'NULL' THEN NULL ELSE BRAND END AS VARCHAR(50)) AS BRAND,
  CAST(CASE WHEN SIZE = 'NULL' THEN NULL ELSE SIZE END AS VARCHAR(20)) AS SIZE,
  CAST(CASE WHEN LEADTIMEDAYS = 'NULL' THEN NULL ELSE LEADTIMEDAYS END AS VARCHAR(38)) AS LEADTIMEDAYS,
  CAST(CASE WHEN QUANTITYPEROUTER = 'NULL' THEN NULL ELSE QUANTITYPEROUTER END AS VARCHAR(38)) AS QUANTITYPEROUTER,
  CAST(CASE WHEN ISCHILLERSTOCK = 'NULL' THEN NULL ELSE ISCHILLERSTOCK END AS VARCHAR(38)) AS ISCHILLERSTOCK,
  CAST(CASE WHEN BARCODE = 'NULL' THEN NULL ELSE BARCODE END AS VARCHAR(50)) AS BARCODE,
  CAST(CASE WHEN TAXRATE = 'NULL' THEN NULL ELSE TAXRATE END AS VARCHAR(38)) AS TAXRATE,
  CAST(CASE WHEN UNITPRICE = 'NULL' THEN NULL ELSE UNITPRICE END AS VARCHAR(38)) AS UNITPRICE,
  CAST(CASE WHEN RECOMMENDEDRETAILPRICE = 'NULL' THEN NULL ELSE RECOMMENDEDRETAILPRICE END AS VARCHAR(38)) AS RECOMMENDEDRETAILPRICE,
  CAST(CASE WHEN TYPICALWEIGHTPERUNIT = 'NULL' THEN NULL ELSE TYPICALWEIGHTPERUNIT END AS VARCHAR(38)) AS TYPICALWEIGHTPERUNIT
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS_RAW;


--Drop column barcode (unneccesary column)
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
DROP COLUMN BARCODE;
    

-- Null value checks for all columns (only numeric/boolean data type columns)
SELECT 
    SUM(CASE WHEN STOCKITEMID IS NULL THEN 1 END) AS count_STOCKITEMID_NULL,
    SUM(CASE WHEN SUPPLIERID IS NULL THEN 1 END) AS count_SUPPLIERID_NULL,
    SUM(CASE WHEN UNITPACKAGEID IS NULL THEN 1 END) AS count_UNITPACKAGEID_NULL,
    SUM(CASE WHEN STOCKITEMNAME IS NULL THEN 1 END) AS count_STOCKITEMNAME_NULL,
    SUM(CASE WHEN BRAND IS NULL THEN 1 END) AS count_BRAND_NULL,
    SUM(CASE WHEN SIZE IS NULL THEN 1 END) AS count_SIZE_NULL,    
    SUM(CASE WHEN OUTERPACKAGEID IS NULL THEN 1 END) AS count_OUTERPACKAGEID_NULL,
    SUM(CASE WHEN LEADTIMEDAYS IS NULL THEN 1 END) AS count_LEADTIMEDAYS_NULL,
    SUM(CASE WHEN QUANTITYPEROUTER IS NULL THEN 1 END) AS count_QUANTITYPEROUTER_NULL,
    SUM(CASE WHEN ISCHILLERSTOCK IS NULL THEN 1 END) AS count_ISCHILLERSTOCK_NULL,
    SUM(CASE WHEN TAXRATE IS NULL THEN 1 END) AS count_TAXRATE_NULL,
    SUM(CASE WHEN UNITPRICE IS NULL THEN 1 END) AS count_UNITPRICE_NULL,
    SUM(CASE WHEN RECOMMENDEDRETAILPRICE IS NULL THEN 1 END) AS count_RECOMMENDEDRETAILPRICE_NULL,
    SUM(CASE WHEN TYPICALWEIGHTPERUNIT IS NULL THEN 1 END) AS count_TYPICALWEIGHTPERUNIT_NULL
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS;


-- Update Size column
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET SIZE = 'No Size'
WHERE SIZE IS NULL;

-- Update Brand column
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET BRAND = 'No Brand'
WHERE BRAND IS NULL;

-- Assign COLORID = 40 for items with specific text, but avoid overwriting existing correct COLORIDs
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID = 40 -- No Color
WHERE COLORID IS NULL -- Only update items with no assigned COLORID
  AND (
      STOCKITEMNAME ILIKE '%food flash drive%' 
      OR STOCKITEMNAME ILIKE '%Pack of 12 action figures%' 
      OR STOCKITEMNAME ILIKE '%bubblewrap%' 
      OR STOCKITEMNAME ILIKE '%bubble wrap%'
      OR STOCKITEMNAME ILIKE '%replacement blades%'
      OR STOCKITEMNAME ILIKE '%Air cushion film%'
      OR STOCKITEMNAME ILIKE '%Novelty chilli chocolates%'
      OR STOCKITEMNAME ILIKE '%Chocolate%'
      OR STOCKITEMNAME ILIKE '%White chocolate%'
  );

-- Assign Transparent ColorID
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID = 41 -- Transparent
WHERE STOCKITEMNAME ILIKE '%Clear packaging tape%';

-- Assign Multicolor ColorID
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID = 42 -- Multicolor
WHERE STOCKITEMNAME ILIKE '%Black and Orange%'
   OR STOCKITEMNAME ILIKE '%Black and yellow%'
   OR STOCKITEMNAME ILIKE '%Red and white%';
   
-- Assign ColorIDs based on keywords with brackets (e.g., (Azure), (Beige), (Black), etc.)
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET ColorID = 
    CASE 
        WHEN LOWER(StockItemName) LIKE '%(azure)%' THEN 1
        WHEN LOWER(StockItemName) LIKE '%(beige)%' THEN 2
        WHEN LOWER(StockItemName) LIKE '%(black)%' THEN 3
        WHEN LOWER(StockItemName) LIKE '%(blue)%' THEN 4
        WHEN LOWER(StockItemName) LIKE '%(charcoal)%' THEN 5
        WHEN LOWER(StockItemName) LIKE '%(chartreuse)%' THEN 6
        WHEN LOWER(StockItemName) LIKE '%(cyan)%' THEN 7
        WHEN LOWER(StockItemName) LIKE '%(dark brown)%' THEN 8
        WHEN LOWER(StockItemName) LIKE '%(dark green)%' THEN 9
        WHEN LOWER(StockItemName) LIKE '%(fuchsia)%' THEN 10
        WHEN LOWER(StockItemName) LIKE '%(gold)%' THEN 11
        WHEN LOWER(StockItemName) LIKE '%(steel gray)%' THEN 12
        WHEN LOWER(StockItemName) LIKE '%(hot pink)%' THEN 13
        WHEN LOWER(StockItemName) LIKE '%(indigo)%' THEN 14
        WHEN LOWER(StockItemName) LIKE '%(ivory)%' THEN 15
        WHEN LOWER(StockItemName) LIKE '%(khaki)%' THEN 16
        WHEN LOWER(StockItemName) LIKE '%(lavender)%' THEN 17
        WHEN LOWER(StockItemName) LIKE '%(light brown)%' THEN 18
        WHEN LOWER(StockItemName) LIKE '%(light green)%' THEN 19
        WHEN LOWER(StockItemName) LIKE '%(maroon)%' THEN 20
        WHEN LOWER(StockItemName) LIKE '%(mauve)%' THEN 21
        WHEN LOWER(StockItemName) LIKE '%(navy blue)%' THEN 22
        WHEN LOWER(StockItemName) LIKE '%(olive)%' THEN 23
        WHEN LOWER(StockItemName) LIKE '%(orange)%' THEN 24
        WHEN LOWER(StockItemName) LIKE '%(plum)%' THEN 25
        WHEN LOWER(StockItemName) LIKE '%(puce)%' THEN 26
        WHEN LOWER(StockItemName) LIKE '%(purple)%' THEN 27
        WHEN LOWER(StockItemName) LIKE '%(red)%' THEN 28
        WHEN LOWER(StockItemName) LIKE '%(royal blue)%' THEN 29
        WHEN LOWER(StockItemName) LIKE '%(salmon)%' THEN 30
        WHEN LOWER(StockItemName) LIKE '%(silver)%' THEN 31
        WHEN LOWER(StockItemName) LIKE '%(tan)%' THEN 32
        WHEN LOWER(StockItemName) LIKE '%(teal)%' THEN 33
        WHEN LOWER(StockItemName) LIKE '%(wheat)%' THEN 34
        WHEN LOWER(StockItemName) LIKE '%(white)%' THEN 35
        WHEN LOWER(StockItemName) LIKE '%(yellow)%' THEN 36
        ELSE ColorID -- Retain the existing ColorID if no match
    END
WHERE ColorID IS NULL;

-- Assign Black ColorID
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID = 3 -- Black
WHERE STOCKITEMNAME ILIKE '%Permanent marker black%';

-- Assign Red ColorID
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID = 28 -- Red
WHERE STOCKITEMNAME ILIKE '%Permanent marker red%';

-- Assign Blue ColorID
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID = 4 -- Blue
WHERE STOCKITEMNAME ILIKE '%Permanent marker blue%';

-- Assign Generic Green ColorID
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID = 37 -- Green
WHERE STOCKITEMNAME ILIKE '%Green%'
  AND COLORID IS NULL; -- Ensure only unassigned items are updated

-- Assign Pink ColorID
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID = 38 -- Pink
WHERE STOCKITEMNAME ILIKE '%Pink%'
  AND COLORID IS NULL; -- Ensure only unassigned items are updated

-- Assign Brown ColorID
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID = 39 -- Brown
WHERE STOCKITEMNAME ILIKE '%Brown%'
  AND COLORID IS NULL;

-- Assign Blue ColorID
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID = 4 -- Blue
WHERE STOCKITEMNAME ILIKE '%(Blue)%'
  AND COLORID IS NULL;

-- Assign Blue ColorID
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID = 4 -- Blue
WHERE STOCKITEMNAME ILIKE '%Blue%'
  AND COLORID IS NULL;

-- Assign Blue ColorID
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID = 43 -- Gray
WHERE STOCKITEMNAME ILIKE '%Gray%'
  AND COLORID IS NULL;


-- Assign Generic Green ColorID
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID = 28 -- Red
WHERE STOCKITEMNAME ILIKE '%Red%'
  AND COLORID IS NULL; -- Ensure only unassigned items are updated


-- Assign Generic Green ColorID
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID = 3 -- Black
WHERE STOCKITEMNAME ILIKE '%Black%'
  AND COLORID IS NULL; -- Ensure only unassigned items are updated

-- Handle remaining NULL values in Color
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID = 40 -- No Color
WHERE COLORID IS NULL;

-- Null value checks for all columns (only varchar data type columns)
SELECT
    COUNT(CASE WHEN STOCKITEMNAME  IS NULL THEN 1 END) AS NULL_COUNT_STOCKITEMNAME,    
    COUNT(CASE WHEN COLORID IS NULL THEN 1 END) AS NULL_COUNT_COLORID,
    COUNT(CASE WHEN BRAND IS NULL THEN 1 END) AS NULL_COUNT_BRAND,
    COUNT(CASE WHEN SIZE  IS NULL THEN 1 END) AS NULL_COUNT_SIZE
FROM 
    KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS;
    

-- Null value checks for all columns (only numeric/boolean data type columns)
SELECT 
    COUNT(CASE WHEN STOCKITEMID IS NULL THEN 1 END) AS count_STOCKITEMID_NULL,
    COUNT(CASE WHEN SUPPLIERID IS NULL THEN 1 END) AS count_SUPPLIERID_NULL,
    COUNT(CASE WHEN UNITPACKAGEID IS NULL THEN 1 END) AS count_UNITPACKAGEID_NULL,
    COUNT(CASE WHEN OUTERPACKAGEID IS NULL THEN 1 END) AS count_OUTERPACKAGEID_NULL,
    COUNT(CASE WHEN LEADTIMEDAYS IS NULL THEN 1 END) AS count_LEADTIMEDAYS_NULL,
    COUNT(CASE WHEN QUANTITYPEROUTER IS NULL THEN 1 END) AS count_QUANTITYPEROUTER_NULL,
    COUNT(CASE WHEN ISCHILLERSTOCK IS NULL THEN 1 END) AS count_ISCHILLERSTOCK_NULL,
    COUNT(CASE WHEN TAXRATE IS NULL THEN 1 END) AS count_TAXRATE_NULL,
    COUNT(CASE WHEN UNITPRICE IS NULL THEN 1 END) AS count_UNITPRICE_NULL,
    COUNT(CASE WHEN RECOMMENDEDRETAILPRICE IS NULL THEN 1 END) AS count_RECOMMENDEDRETAILPRICE_NULL,
    COUNT(CASE WHEN TYPICALWEIGHTPERUNIT IS NULL THEN 1 END) AS count_TYPICALWEIGHTPERUNIT_NULL
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS;


-- STOCKITEMID
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
ADD COLUMN STOCKITEMID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET STOCKITEMID_NUM = TO_NUMBER(STOCKITEMID);

SELECT STOCKITEMID, STOCKITEMID_NUM
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
DROP COLUMN STOCKITEMID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
RENAME COLUMN STOCKITEMID_NUM TO STOCKITEMID;


-- SUPPLIERID
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
ADD COLUMN SUPPLIERID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET SUPPLIERID_NUM = TO_NUMBER(SUPPLIERID);

SELECT SUPPLIERID, SUPPLIERID_NUM
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
DROP COLUMN SUPPLIERID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
RENAME COLUMN SUPPLIERID_NUM TO SUPPLIERID;

--check the number of rows of SUPPLIERID = 7(random SUPPLIERID from data), cross checked with excel sheet
SELECT COUNT(*) AS row_count
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
WHERE SUPPLIERID = 7;



-- COLORID
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
ADD COLUMN COLORID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID_NUM = TO_NUMBER(COLORID);

SELECT COLORID, COLORID_NUM
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
DROP COLUMN COLORID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
RENAME COLUMN COLORID_NUM TO COLORID;

--check the number of rows of SUPPLIERID = 7(random SUPPLIERID from data), cross checked with excel sheet
SELECT COUNT(*) AS row_count
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
WHERE COLORID = 28;



-- UNITPACKAGEID
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
ADD COLUMN UNITPACKAGEID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET UNITPACKAGEID_NUM = TO_NUMBER(UNITPACKAGEID);

SELECT UNITPACKAGEID, UNITPACKAGEID_NUM
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
DROP COLUMN UNITPACKAGEID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
RENAME COLUMN UNITPACKAGEID_NUM TO UNITPACKAGEID;




-- OUTERPACKAGEID
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
ADD COLUMN OUTERPACKAGEID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET OUTERPACKAGEID_NUM = TO_NUMBER(OUTERPACKAGEID);

SELECT OUTERPACKAGEID, OUTERPACKAGEID_NUM
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
DROP COLUMN OUTERPACKAGEID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
RENAME COLUMN OUTERPACKAGEID_NUM TO OUTERPACKAGEID;




-- LEADTIMEDAYS
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
ADD COLUMN LEADTIMEDAYS_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET LEADTIMEDAYS_NUM = TO_NUMBER(LEADTIMEDAYS);

SELECT LEADTIMEDAYS, LEADTIMEDAYS_NUM
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
DROP COLUMN LEADTIMEDAYS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
RENAME COLUMN LEADTIMEDAYS_NUM TO LEADTIMEDAYS;




-- QUANTITYPEROUTER
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
ADD COLUMN QUANTITYPEROUTER_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET QUANTITYPEROUTER_NUM = TO_NUMBER(QUANTITYPEROUTER);

SELECT QUANTITYPEROUTER, QUANTITYPEROUTER_NUM
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
DROP COLUMN QUANTITYPEROUTER;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
RENAME COLUMN QUANTITYPEROUTER_NUM TO QUANTITYPEROUTER;


-- TAXRATE
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
ADD COLUMN TAXRATE_NUM DECIMAL(18, 2);

UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET TAXRATE_NUM = TO_DECIMAL(TAXRATE, 18, 2);

SELECT TAXRATE, TAXRATE_NUM
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
DROP COLUMN TAXRATE;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
RENAME COLUMN TAXRATE_NUM TO TAXRATE;


-- UNITPRICE
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
ADD COLUMN UNITPRICE_NUM DECIMAL(18, 2);

UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET UNITPRICE_NUM = TO_DECIMAL(UNITPRICE, 18, 2);

SELECT UNITPRICE, UNITPRICE_NUM
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
DROP COLUMN UNITPRICE;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
RENAME COLUMN UNITPRICE_NUM TO UNITPRICE;


--RECOMMENDEDRETAILPRICE
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
ADD COLUMN RECOMMENDEDRETAILPRICE_NUM DECIMAL(18, 2);

UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET RECOMMENDEDRETAILPRICE_NUM = TO_DECIMAL(RECOMMENDEDRETAILPRICE, 18, 2);

SELECT RECOMMENDEDRETAILPRICE, RECOMMENDEDRETAILPRICE_NUM
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
DROP COLUMN RECOMMENDEDRETAILPRICE;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
RENAME COLUMN RECOMMENDEDRETAILPRICE_NUM TO RECOMMENDEDRETAILPRICE;


--TYPICALWEIGHTPERUNIT
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
ADD COLUMN TYPICALWEIGHTPERUNIT_NUM DECIMAL(18, 2);

UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET TYPICALWEIGHTPERUNIT_NUM = TO_DECIMAL(TYPICALWEIGHTPERUNIT, 18, 2);

SELECT TYPICALWEIGHTPERUNIT, TYPICALWEIGHTPERUNIT_NUM
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
DROP COLUMN TYPICALWEIGHTPERUNIT;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
RENAME COLUMN TYPICALWEIGHTPERUNIT_NUM TO TYPICALWEIGHTPERUNIT;


-- TYPICALWEIGHTPERUNIT 
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
ADD COLUMN IsChillerStock_NUM BOOLEAN;

UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET IsChillerStock_NUM = TO_BOOLEAN(IsChillerStock);

SELECT IsChillerStock, IsChillerStock_NUM
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
DROP COLUMN IsChillerStock;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
RENAME COLUMN IsChillerStock_NUM TO IsChillerStock;



-- primary key
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
ADD CONSTRAINT PK_WAREHOUSE_STOCKITEMS_STOCKITEMID
PRIMARY KEY (STOCKITEMID);

--unique key
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
ADD CONSTRAINT UK_WAREHOUSE_STOCKITEMS_STOCKITEMNAME
UNIQUE (STOCKITEMNAME);


-- null error handling for primary key (increment 1 to impute null value primary keys from the previous record)
WITH CTE AS (
    SELECT 
        StockItemID,
        StockItemName,
        SupplierID,
        ColorID,
        UnitPackageID,
        OuterPackageID,
        Brand,
        Size,
        LeadTimeDays,
        QuantityPerOuter,
        IsChillerStock,
        TaxRate,
        UnitPrice,
        RecommendedRetailPrice,
        TypicalWeightPerUnit,
        LAG(StockItemID) OVER (ORDER BY StockItemID) AS prev_stockitemid,
        ROW_NUMBER() OVER (ORDER BY StockItemID) AS row_num
    FROM KN_LOGISTICS.SNOWSQL.Warehouse_StockItems
)
SELECT 
    StockItemName,
    SupplierID,
    ColorID,
    UnitPackageID,
    OuterPackageID,
    Brand,
    Size,
    LeadTimeDays,
    QuantityPerOuter,
    IsChillerStock,
    TaxRate,
    UnitPrice,
    RecommendedRetailPrice,
    TypicalWeightPerUnit,
    CASE
        WHEN StockItemID IS NULL THEN prev_stockitemid + 1
        ELSE StockItemID
    END AS StockItemID
FROM CTE
ORDER BY row_num;

-- Foreign Key: Warehouse.StockItems.SupplierID -> Purchasing.Suppliers.SupplierID
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
ADD CONSTRAINT FK_Warehouse_StockItems_SupplierID_Purchasing_Suppliers
FOREIGN KEY (SupplierID)
REFERENCES KN_LOGISTICS.SNOWSQL.Purchasing_Suppliers(SupplierID);

-- Foreign Key: Sales.InvoiceLines.StockItemID -> Warehouse.StockItems.StockItemID
ALTER TABLE KN_LOGISTICS.SNOWSQL.Sales_InvoiceLines
ADD CONSTRAINT FK_Sales_InvoiceLines_StockItemID_Warehouse_StockItems
FOREIGN KEY (StockItemID)
REFERENCES KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS(StockItemID);

-- Foreign Key: Sales.OrderLines.StockItemID -> Warehouse.StockItems.StockItemID
ALTER TABLE KN_LOGISTICS.SNOWSQL.Sales_OrderLines
ADD CONSTRAINT FK_Sales_OrderLines_StockItemID_Warehouse_StockItems
FOREIGN KEY (StockItemID)
REFERENCES KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS(StockItemID);

-- Foreign Key: Purchasing.PurchaseOrderLines.StockItemID -> Warehouse.StockItems.StockItemID
ALTER TABLE KN_LOGISTICS.SNOWSQL.Purchasing_PurchaseOrderLines
ADD CONSTRAINT FK_Purchasing_PurchaseOrderLines_StockItemID_Warehouse_StockItems
FOREIGN KEY (StockItemID)
REFERENCES KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS(StockItemID);

-- Foreign Key: Warehouse.StockItemHoldings.StockItemID -> Warehouse.StockItems.StockItemID
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_StockItemHoldings
ADD CONSTRAINT PKFK_Warehouse_StockItemHoldings_StockItemID_Warehouse_StockItems
FOREIGN KEY (StockItemID)
REFERENCES KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS(StockItemID);

-- Foreign Key: Warehouse.StockItemTransactions.StockItemID -> Warehouse.StockItems.StockItemID
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_StockItemTransactions
ADD CONSTRAINT FK_Warehouse_StockItemTransactions_StockItemID_Warehouse_StockItems
FOREIGN KEY (StockItemID)
REFERENCES KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS(StockItemID);

-- Foreign key for ColorID
ALTER TABLE KN_LOGISTICS.SNOWSQL.Warehouse_StockItems
ADD CONSTRAINT FK_Warehouse_StockItems_ColorID_Warehouse_Colors
FOREIGN KEY (ColorID)
REFERENCES KN_LOGISTICS.SNOWSQL.Warehouse_Colors (ColorID);

-- Foreign key for OuterPackageID
ALTER TABLE KN_LOGISTICS.SNOWSQL.Warehouse_StockItems
ADD CONSTRAINT FK_Warehouse_StockItems_OuterPackageID_Warehouse_PackageTypes
FOREIGN KEY (OuterPackageID)
REFERENCES KN_LOGISTICS.SNOWSQL.Warehouse_PackageTypes (PackageTypeID);

-- Foreign key for UnitPackageID
ALTER TABLE KN_LOGISTICS.SNOWSQL.Warehouse_StockItems
ADD CONSTRAINT FK_Warehouse_StockItems_UnitPackageID_Warehouse_PackageTypes
FOREIGN KEY (UnitPackageID)
REFERENCES KN_LOGISTICS.SNOWSQL.Warehouse_PackageTypes (PackageTypeID);
