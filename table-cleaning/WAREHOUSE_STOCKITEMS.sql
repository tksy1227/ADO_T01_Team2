create or replace TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS (
	STOCKITEMID NUMBER(38,0) NOT NULL,
	STOCKITEMNAME VARCHAR(16777216),
	SUPPLIERID VARCHAR(16777216),
	COLORID VARCHAR(16777216),
	UNITPACKAGEID NUMBER(38,0),
	OUTERPACKAGEID NUMBER(38,0),
	BRAND VARCHAR(16777216),
	SIZE VARCHAR(16777216),
	LEADTIMEDAYS NUMBER(38,0),
	QUANTITYPEROUTER NUMBER(38,0),
	ISCHILLERSTOCK BOOLEAN,
	BARCODE VARCHAR(16777216),
	TAXRATE FLOAT,
	UNITPRICE FLOAT,
	RECOMMENDEDRETAILPRICE FLOAT,
	TYPICALWEIGHTPERUNIT FLOAT,
	unique (STOCKITEMNAME),
	constraint PK_STOCKITEMS primary key (STOCKITEMID),
  constraint FK_WAREHOUSE_STOCKITEMS_OUTERPACKAGEID_WAREHOUSE_PACKAGETYPES foreign key (OUTERPACKAGEID) references KN_LOGISTICS.SNOWSQL.WAREHOUSE_PACKAGETYPES(PACKAGETYPEID),
  constraint FK_WAREHOUSE_STOCKITEMS_UNITPACKAGEID_WAREHOUSE_PACKAGETYPES foreign key (UNITPACKAGEID) references KN_LOGISTICS.SNOWSQL.WAREHOUSE_PACKAGETYPES(PACKAGETYPEID),
  constraint FK_WAREHOUSE_STOCKITEMS_COLORID_WAREHOUSE_COLORS foreign key (COLORID) references KN_LOGISTICS.SNOWSQL.WAREHOUSE_COLORS(COLORID)
);

SELECT *
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
WHERE STOCKITEMID IS NULL;

//Drop column barcode (unneccesary)
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
DROP COLUMN BARCODE;

// check after dropped barcode column
SELECT *
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS LIMIT 10;

// Total Number of Null values in string 'NULL' for all columns except boolean column (ISCHILLERSTOCK) and numeric columns
SELECT COUNT(*) FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
WHERE STOCKITEMNAME = 'NULL'
OR COLORID = 'NULL'
OR BRAND = 'NULL'
OR SIZE = 'NULL';

// Total Number of Null values for all columns
SELECT COUNT(*) FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
WHERE STOCKITEMID IS NULL
OR STOCKITEMNAME IS NULL
OR SUPPLIERID IS NULL
OR COLORID IS NULL
OR UNITPACKAGEID IS NULL
OR OUTERPACKAGEID IS NULL
OR BRAND IS NULL
OR SIZE IS NULL
OR LEADTIMEDAYS IS NULL
OR QUANTITYPEROUTER IS NULL
OR ISCHILLERSTOCK IS NULL
OR TAXRATE IS NULL
OR UNITPRICE IS NULL
OR RECOMMENDEDRETAILPRICE IS NULL
OR TYPICALWEIGHTPERUNIT IS NULL;


// Null value checks for all columns (only varchar data type columns)
SELECT
    SUM(CASE WHEN STOCKITEMNAME = 'NULL' THEN 1 ELSE 0 END) AS NULL_COUNT_STOCKITEMNAME,    
    SUM(CASE WHEN COLORID = 'NULL' THEN 1 ELSE 0 END) AS NULL_COUNT_COLORID,
    SUM(CASE WHEN BRAND = 'NULL' THEN 1 ELSE 0 END) AS NULL_COUNT_BRAND,
    SUM(CASE WHEN SIZE = 'NULL' THEN 1 ELSE 0 END) AS NULL_COUNT_SIZE
FROM 
    KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS;
    

// Null value checks for all columns (only numeric/boolean data type columns)
SELECT 
    COUNT(CASE WHEN STOCKITEMID IS NULL THEN 1 END) AS count_STOCKITEMID_NULL,
    COUNT(CASE WHEN SUPPLIERID IS NULL THEN 1 END) AS count_SUPPLIERID_NULL,
    COUNT(CASE WHEN UNITPACKAGEID IS NULL THEN 1 END) AS count_UNITPACKAGEID_NULL,
    COUNT(CASE WHEN OUTERPACKAGEID IS NULL THEN 1 END) AS count_OUTERPACKAGEID_NULL,
    COUNT(CASE WHEN LEADTIMEDAYS IS NULL THEN 1 END) AS count_LEADTIMEDAYS_NULL,
    COUNT(CASE WHEN QUANTITYPEROUTER IS NULL THEN 1 END) AS count_QUANTITYPEROUTER_NULL,
    COUNT(CASE WHEN ISCHILLERSTOCK IS NULL THEN 1 END) AS count_ISCHILLERSTOCK_NULL,
    COUNT(CASE WHEN TAXRATE IS NULL THEN 1 END) AS count_TAXRATE_NULL,
    COUNT(CASE WHEN UNITPRICE IS NULL THEN 1 END) AS count_UNITPRICE_NULL,
    COUNT(CASE WHEN RECOMMENDEDRETAILPRICE IS NULL THEN 1 END) AS count_RECOMMENDEDRETAILPRICE_NULL,
    COUNT(CASE WHEN TYPICALWEIGHTPERUNIT IS NULL THEN 1 END) AS count_TYPICALWEIGHTPERUNIT_NULL
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS;


-- Handle remaining NULL values in COLORID
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID = NULL -- oTHERS
WHERE COLORID = 'NULL';


-- Update Size column
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET SIZE = 'No Size'
WHERE SIZE = 'NULL';

-- Update Brand column
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET BRAND = 'No Brand'
WHERE BRAND = 'NULL';

-- Assign COLORID = 40 for items with specific text, but avoid overwriting existing correct COLORIDs
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID = 40 -- No Color
WHERE COLORID IS NULL -- Only update items with no assigned COLORID
  AND (
      STOCKITEMNAME ILIKE '%food flash drive%' 
      OR STOCKITEMNAME ILIKE '%Pack of 12 action figures%' 
      OR STOCKITEMNAME ILIKE '%bubblewrap%' 
      OR STOCKITEMNAME ILIKE '%bubble wrap%'
      OR STOCKITEMNAME ILIKE '%replacement blades%'
      OR STOCKITEMNAME ILIKE '%Air cushion film%'
      OR STOCKITEMNAME ILIKE '%Novelty chilli chocolates%'
      OR STOCKITEMNAME ILIKE '%Chocolate%'
      OR STOCKITEMNAME ILIKE '%White chocolate%'
  );

-- Assign Transparent ColorID
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID = 41 -- Transparent
WHERE STOCKITEMNAME ILIKE '%Clear packaging tape%';

-- Assign Multicolor ColorID
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID = 42 -- Multicolor
WHERE STOCKITEMNAME ILIKE '%Black and Orange%'
   OR STOCKITEMNAME ILIKE '%Black and yellow%'
   OR STOCKITEMNAME ILIKE '%Red and white%';
   
-- Assign ColorIDs based on keywords with brackets (e.g., (Azure), (Beige), (Black), etc.)
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET ColorID = 
    CASE 
        WHEN LOWER(StockItemName) LIKE '%(azure)%' THEN 1
        WHEN LOWER(StockItemName) LIKE '%(beige)%' THEN 2
        WHEN LOWER(StockItemName) LIKE '%(black)%' THEN 3
        WHEN LOWER(StockItemName) LIKE '%(blue)%' THEN 4
        WHEN LOWER(StockItemName) LIKE '%(charcoal)%' THEN 5
        WHEN LOWER(StockItemName) LIKE '%(chartreuse)%' THEN 6
        WHEN LOWER(StockItemName) LIKE '%(cyan)%' THEN 7
        WHEN LOWER(StockItemName) LIKE '%(dark brown)%' THEN 8
        WHEN LOWER(StockItemName) LIKE '%(dark green)%' THEN 9
        WHEN LOWER(StockItemName) LIKE '%(fuchsia)%' THEN 10
        WHEN LOWER(StockItemName) LIKE '%(gold)%' THEN 11
        WHEN LOWER(StockItemName) LIKE '%(steel gray)%' THEN 12
        WHEN LOWER(StockItemName) LIKE '%(hot pink)%' THEN 13
        WHEN LOWER(StockItemName) LIKE '%(indigo)%' THEN 14
        WHEN LOWER(StockItemName) LIKE '%(ivory)%' THEN 15
        WHEN LOWER(StockItemName) LIKE '%(khaki)%' THEN 16
        WHEN LOWER(StockItemName) LIKE '%(lavender)%' THEN 17
        WHEN LOWER(StockItemName) LIKE '%(light brown)%' THEN 18
        WHEN LOWER(StockItemName) LIKE '%(light green)%' THEN 19
        WHEN LOWER(StockItemName) LIKE '%(maroon)%' THEN 20
        WHEN LOWER(StockItemName) LIKE '%(mauve)%' THEN 21
        WHEN LOWER(StockItemName) LIKE '%(navy blue)%' THEN 22
        WHEN LOWER(StockItemName) LIKE '%(olive)%' THEN 23
        WHEN LOWER(StockItemName) LIKE '%(orange)%' THEN 24
        WHEN LOWER(StockItemName) LIKE '%(plum)%' THEN 25
        WHEN LOWER(StockItemName) LIKE '%(puce)%' THEN 26
        WHEN LOWER(StockItemName) LIKE '%(purple)%' THEN 27
        WHEN LOWER(StockItemName) LIKE '%(red)%' THEN 28
        WHEN LOWER(StockItemName) LIKE '%(royal blue)%' THEN 29
        WHEN LOWER(StockItemName) LIKE '%(salmon)%' THEN 30
        WHEN LOWER(StockItemName) LIKE '%(silver)%' THEN 31
        WHEN LOWER(StockItemName) LIKE '%(tan)%' THEN 32
        WHEN LOWER(StockItemName) LIKE '%(teal)%' THEN 33
        WHEN LOWER(StockItemName) LIKE '%(wheat)%' THEN 34
        WHEN LOWER(StockItemName) LIKE '%(white)%' THEN 35
        WHEN LOWER(StockItemName) LIKE '%(yellow)%' THEN 36
        ELSE ColorID -- Retain the existing ColorID if no match
    END
WHERE ColorID IS NULL;

-- Assign Black ColorID
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID = 3 -- Black
WHERE STOCKITEMNAME ILIKE '%Permanent marker black%';

-- Assign Red ColorID
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID = 28 -- Red
WHERE STOCKITEMNAME ILIKE '%Permanent marker red%';

-- Assign Blue ColorID
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID = 4 -- Blue
WHERE STOCKITEMNAME ILIKE '%Permanent marker blue%';

-- Assign Generic Green ColorID
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID = 37 -- Green
WHERE STOCKITEMNAME ILIKE '%Green%'
  AND COLORID IS NULL; -- Ensure only unassigned items are updated

-- Assign Pink ColorID
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID = 38 -- Pink
WHERE STOCKITEMNAME ILIKE '%Pink%'
  AND COLORID IS NULL; -- Ensure only unassigned items are updated

-- Assign Brown ColorID
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID = 39 -- Brown
WHERE STOCKITEMNAME ILIKE '%Brown%'
  AND COLORID IS NULL;

-- Assign Blue ColorID
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID = 4 -- Blue
WHERE STOCKITEMNAME ILIKE '%(Blue)%'
  AND COLORID IS NULL;

-- Assign Blue ColorID
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID = 4 -- Blue
WHERE STOCKITEMNAME ILIKE '%Blue%'
  AND COLORID IS NULL;

-- Assign Blue ColorID
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID = 43 -- Grey
WHERE STOCKITEMNAME ILIKE '%Grey%'
  AND COLORID IS NULL;


-- Assign Generic Green ColorID
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID = 28 -- Red
WHERE STOCKITEMNAME ILIKE '%Red%'
  AND COLORID IS NULL; -- Ensure only unassigned items are updated


-- Assign Generic Green ColorID
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID = 3 -- Black
WHERE STOCKITEMNAME ILIKE '%Black%'
  AND COLORID IS NULL; -- Ensure only unassigned items are updated

-- Handle remaining NULL values in Color
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID = 40 -- No Color
WHERE COLORID IS NULL;

// display the whole table for checking
// Null value checks for all columns (only varchar data type columns)
SELECT *
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS LIMIT 10;

// Total Number of Null values in string 'NULL' for all columns except boolean column (ISCHILLERSTOCK) and numeric columns
SELECT COUNT(*) FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
WHERE STOCKITEMNAME = 'NULL'
OR COLORID = 'NULL'
OR BRAND = 'NULL'
OR SIZE = 'NULL';

// Total Number of Null values for all columns
SELECT COUNT(*) FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
WHERE STOCKITEMID IS NULL
OR STOCKITEMNAME IS NULL
OR SUPPLIERID IS NULL
OR COLORID IS NULL
OR UNITPACKAGEID IS NULL
OR OUTERPACKAGEID IS NULL
OR BRAND IS NULL
OR SIZE IS NULL
OR LEADTIMEDAYS IS NULL
OR QUANTITYPEROUTER IS NULL
OR ISCHILLERSTOCK IS NULL
OR TAXRATE IS NULL
OR UNITPRICE IS NULL
OR RECOMMENDEDRETAILPRICE IS NULL
OR TYPICALWEIGHTPERUNIT IS NULL;


// Null value checks for all columns (only varchar data type columns)
SELECT
    SUM(CASE WHEN STOCKITEMNAME = 'NULL' THEN 1 ELSE 0 END) AS NULL_COUNT_STOCKITEMNAME,    
    SUM(CASE WHEN COLORID = 'NULL' THEN 1 ELSE 0 END) AS NULL_COUNT_COLORID,
    SUM(CASE WHEN BRAND = 'NULL' THEN 1 ELSE 0 END) AS NULL_COUNT_BRAND,
    SUM(CASE WHEN SIZE = 'NULL' THEN 1 ELSE 0 END) AS NULL_COUNT_SIZE
FROM 
    KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS;
    

// Null value checks for all columns (only numeric/boolean data type columns)
SELECT 
    COUNT(CASE WHEN STOCKITEMID IS NULL THEN 1 END) AS count_STOCKITEMID_NULL,
    COUNT(CASE WHEN SUPPLIERID IS NULL THEN 1 END) AS count_SUPPLIERID_NULL,
    COUNT(CASE WHEN UNITPACKAGEID IS NULL THEN 1 END) AS count_UNITPACKAGEID_NULL,
    COUNT(CASE WHEN OUTERPACKAGEID IS NULL THEN 1 END) AS count_OUTERPACKAGEID_NULL,
    COUNT(CASE WHEN LEADTIMEDAYS IS NULL THEN 1 END) AS count_LEADTIMEDAYS_NULL,
    COUNT(CASE WHEN QUANTITYPEROUTER IS NULL THEN 1 END) AS count_QUANTITYPEROUTER_NULL,
    COUNT(CASE WHEN ISCHILLERSTOCK IS NULL THEN 1 END) AS count_ISCHILLERSTOCK_NULL,
    COUNT(CASE WHEN TAXRATE IS NULL THEN 1 END) AS count_TAXRATE_NULL,
    COUNT(CASE WHEN UNITPRICE IS NULL THEN 1 END) AS count_UNITPRICE_NULL,
    COUNT(CASE WHEN RECOMMENDEDRETAILPRICE IS NULL THEN 1 END) AS count_RECOMMENDEDRETAILPRICE_NULL,
    COUNT(CASE WHEN TYPICALWEIGHTPERUNIT IS NULL THEN 1 END) AS count_TYPICALWEIGHTPERUNIT_NULL
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS;

// display all the rows for checking
SELECT *
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS;



// SUPPLIERID
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
ADD COLUMN SUPPLIERID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET SUPPLIERID_NUM = TO_NUMBER(SUPPLIERID);

SELECT SUPPLIERID, SUPPLIERID_NUM
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
DROP COLUMN SUPPLIERID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
RENAME COLUMN SUPPLIERID_NUM TO SUPPLIERID;

// Check 10 rows of SUPPLIERID after updating the data type
SELECT SUPPLIERID FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS LIMIT 10;

// Check 10 rows of the whole table after updating the data type
SELECT * FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS;

SELECT *
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
WHERE SUPPLIERID = 7;

//check the number of rows of SUPPLIERID = 7(random SUPPLIERID from data), cross checked with excel sheet
SELECT COUNT(*) AS row_count
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
WHERE SUPPLIERID = 7;



// COLORID
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
ADD COLUMN COLORID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
SET COLORID_NUM = TO_NUMBER(COLORID);

SELECT COLORID, COLORID_NUM
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
DROP COLUMN COLORID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
RENAME COLUMN COLORID_NUM TO COLORID;

// Check 10 rows of SUPPLIERID after updating the data type
SELECT COLORID FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS LIMIT 10;

// Check 10 rows of the whole table after updating the data type
SELECT * FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS;

SELECT *
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
WHERE StockItemName = 28;

//check the number of rows of SUPPLIERID = 7(random SUPPLIERID from data), cross checked with excel sheet
SELECT COUNT(*) AS row_count
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
WHERE COLORID = 28;



-- Foreign Key: Warehouse.StockItems.SupplierID -> Purchasing.Suppliers.SupplierID
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
ADD CONSTRAINT FK_Warehouse_StockItems_SupplierID_Purchasing_Suppliers
FOREIGN KEY (SupplierID)
REFERENCES KN_LOGISTICS.SNOWSQL.Purchasing_Suppliers(SupplierID);

-- Foreign Key: Sales.InvoiceLines.StockItemID -> Warehouse.StockItems.StockItemID
ALTER TABLE KN_LOGISTICS.SNOWSQL.Sales_InvoiceLines
ADD CONSTRAINT FK_Sales_InvoiceLines_StockItemID_Warehouse_StockItems
FOREIGN KEY (StockItemID)
REFERENCES KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS(StockItemID);

-- Foreign Key: Sales.OrderLines.StockItemID -> Warehouse.StockItems.StockItemID
ALTER TABLE KN_LOGISTICS.SNOWSQL.Sales_OrderLines
ADD CONSTRAINT FK_Sales_OrderLines_StockItemID_Warehouse_StockItems
FOREIGN KEY (StockItemID)
REFERENCES KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS(StockItemID);

-- Foreign Key: Purchasing.PurchaseOrderLines.StockItemID -> Warehouse.StockItems.StockItemID
ALTER TABLE KN_LOGISTICS.SNOWSQL.Purchasing_PurchaseOrderLines
ADD CONSTRAINT FK_Purchasing_PurchaseOrderLines_StockItemID_Warehouse_StockItems
FOREIGN KEY (StockItemID)
REFERENCES KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS(StockItemID);

-- Foreign Key: Warehouse.StockItemHoldings.StockItemID -> Warehouse.StockItems.StockItemID
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_StockItemHoldings
ADD CONSTRAINT PKFK_Warehouse_StockItemHoldings_StockItemID_Warehouse_StockItems
FOREIGN KEY (StockItemID)
REFERENCES KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS(StockItemID);

-- Foreign Key: Warehouse.StockItemStockGroups.StockItemID -> Warehouse.StockItems.StockItemID
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_StockItemStockGroups
ADD CONSTRAINT FK_Warehouse_StockItemStockGroups_StockItemID_Warehouse_StockItems
FOREIGN KEY (StockItemID)
REFERENCES KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS(StockItemID);

-- Foreign Key: Warehouse.StockItemTransactions.StockItemID -> Warehouse.StockItems.StockItemID
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_StockItemTransactions
ADD CONSTRAINT FK_Warehouse_StockItemTransactions_StockItemID_Warehouse_StockItems
FOREIGN KEY (StockItemID)
REFERENCES KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS(StockItemID);




-- Foreign key for ColorID
ALTER TABLE KN_LOGISTICS.SNOWSQL.Warehouse_StockItems
ADD CONSTRAINT FK_Warehouse_StockItems_ColorID_Warehouse_Colors
FOREIGN KEY (ColorID)
REFERENCES KN_LOGISTICS.SNOWSQL.Warehouse_Colors (ColorID);

-- Foreign key for OuterPackageID
ALTER TABLE KN_LOGISTICS.SNOWSQL.Warehouse_StockItems
ADD CONSTRAINT FK_Warehouse_StockItems_OuterPackageID_Warehouse_PackageTypes
FOREIGN KEY (OuterPackageID)
REFERENCES KN_LOGISTICS.SNOWSQL.Warehouse_PackageTypes (PackageTypeID);

-- Foreign key for UnitPackageID
ALTER TABLE KN_LOGISTICS.SNOWSQL.Warehouse_StockItems
ADD CONSTRAINT FK_Warehouse_StockItems_UnitPackageID_Warehouse_PackageTypes
FOREIGN KEY (UnitPackageID)
REFERENCES KN_LOGISTICS.SNOWSQL.Warehouse_PackageTypes (PackageTypeID);




// Duplicated rows
SELECT STOCKITEMID, COUNT(*) AS count
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS
GROUP BY STOCKITEMID
HAVING COUNT(*) > 1;



SELECT 
    si.StockItemID,
    si.StockItemName,
    si.ColorID,
    c.ColorName,
    si.OuterPackageID,
    op.PackageTypeName AS OuterPackageType,
    si.UnitPackageID,
    up.PackageTypeName AS UnitPackageType,
    si.SupplierID,
    s.SupplierName,
    il.InvoiceLineID,
    ol.OrderLineID,
    pol.PurchaseOrderLineID,
    sih.QuantityOnHand,
    ssg.StockGroupID,
    sit.StockItemTransactionID
FROM 
    KN_LOGISTICS.SNOWSQL.Warehouse_StockItems AS si
LEFT JOIN 
    KN_LOGISTICS.SNOWSQL.Warehouse_Colors AS c 
    ON si.ColorID = c.ColorID
LEFT JOIN 
    KN_LOGISTICS.SNOWSQL.Warehouse_PackageTypes AS op 
    ON si.OuterPackageID = op.PackageTypeID
LEFT JOIN 
    KN_LOGISTICS.SNOWSQL.Warehouse_PackageTypes AS up 
    ON si.UnitPackageID = up.PackageTypeID
LEFT JOIN 
    KN_LOGISTICS.SNOWSQL.Purchasing_Suppliers AS s 
    ON si.SupplierID = s.SupplierID
LEFT JOIN 
    KN_LOGISTICS.SNOWSQL.Sales_InvoiceLines AS il 
    ON si.StockItemID = il.StockItemID
LEFT JOIN 
    KN_LOGISTICS.SNOWSQL.Sales_OrderLines AS ol 
    ON si.StockItemID = ol.StockItemID
LEFT JOIN 
    KN_LOGISTICS.SNOWSQL.Purchasing_PurchaseOrderLines AS pol 
    ON si.StockItemID = pol.StockItemID
LEFT JOIN 
    KN_LOGISTICS.SNOWSQL.Warehouse_StockItemHoldings AS sih 
    ON si.StockItemID = sih.StockItemID
LEFT JOIN 
    KN_LOGISTICS.SNOWSQL.Warehouse_StockItemStockGroups AS ssg 
    ON si.StockItemID = ssg.StockItemID
LEFT JOIN 
    KN_LOGISTICS.SNOWSQL.Warehouse_StockItemTransactions AS sit 
    ON si.StockItemID = sit.StockItemID;
