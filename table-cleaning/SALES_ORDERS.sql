-- Create a clean table with the same structure as the raw table but we pull data from the raw table into this table (final table)
CREATE OR REPLACE TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS AS
SELECT
  CAST(CASE WHEN ORDERID = 'NULL' THEN NULL ELSE ORDERID END AS VARCHAR(38)) AS ORDERID,
  CAST(CASE WHEN CUSTOMERID = 'NULL' THEN NULL ELSE CUSTOMERID END AS VARCHAR(38)) AS CUSTOMERID,
  CAST(CASE WHEN SALESPERSONPERSONID = 'NULL' THEN NULL ELSE SALESPERSONPERSONID END AS VARCHAR(38)) AS SALESPERSONPERSONID,
  CAST(CASE WHEN PICKEDBYPERSONID = 'NULL' THEN NULL ELSE PICKEDBYPERSONID END AS VARCHAR(38)) AS PICKEDBYPERSONID,
  CAST(CASE WHEN CONTACTPERSONID = 'NULL' THEN NULL ELSE CONTACTPERSONID END AS VARCHAR(38)) AS CONTACTPERSONID,
  CAST(CASE WHEN BACKORDERORDERID = 'NULL' THEN NULL ELSE BACKORDERORDERID END AS VARCHAR(38)) AS BACKORDERORDERID,
  CAST(CASE WHEN ORDERDATE = 'NULL' THEN NULL ELSE ORDERDATE END AS VARCHAR(20)) AS ORDERDATE,
  CAST(CASE WHEN EXPECTEDDELIVERYDATE = 'NULL' THEN NULL ELSE EXPECTEDDELIVERYDATE END AS VARCHAR(20)) AS EXPECTEDDELIVERYDATE,
  CAST(CASE WHEN CUSTOMERPURCHASEORDERNUMBER = 'NULL' THEN NULL ELSE CUSTOMERPURCHASEORDERNUMBER END AS VARCHAR(20)) AS CUSTOMERPURCHASEORDERNUMBER,
  CAST(CASE WHEN ISUNDERSUPPLYBACKORDERED = 'NULL' THEN NULL ELSE ISUNDERSUPPLYBACKORDERED END AS VARCHAR(38)) AS ISUNDERSUPPLYBACKORDERED,
  CAST(CASE WHEN PICKINGCOMPLETEDWHEN = 'NULL' THEN NULL ELSE PICKINGCOMPLETEDWHEN END AS VARCHAR(25)) AS PICKINGCOMPLETEDWHEN
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS_RAW;

--Drop column BACKORDERORDERID (unneccesary column)
ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
DROP COLUMN BACKORDERORDERID;

-- Null value checks for all columns
SELECT 
    COUNT(CASE WHEN ISUNDERSUPPLYBACKORDERED IS NULL THEN 1 END) AS count_ISUNDERSUPPLYBACKORDERED_NULL,
    COUNT(CASE WHEN ORDERID IS NULL THEN 1 END) AS count_ORDERID_NULL,    
    COUNT(CASE WHEN CUSTOMERID IS NULL THEN 1 END) AS count_CUSTOMERID_NULL,
    COUNT(CASE WHEN SALESPERSONPERSONID IS NULL THEN 1 END) AS count_SALESPERSONPERSONID_NULL,
    COUNT(CASE WHEN PICKEDBYPERSONID IS NULL THEN 1 END) AS count_PICKEDBYPERSONID_NULL,
    COUNT(CASE WHEN CONTACTPERSONID IS NULL THEN 1 END) AS count_CONTACTPERSONID_NULL,    
    COUNT(CASE WHEN ORDERDATE IS NULL THEN 1 END) AS count_ORDERDATE_NULL,
    COUNT(CASE WHEN EXPECTEDDELIVERYDATE IS NULL THEN 1 END) AS count_EXPECTEDDELIVERYDATE_NULL,    
    COUNT(CASE WHEN CUSTOMERPURCHASEORDERNUMBER IS NULL THEN 1 END) AS count_CUSTOMERPURCHASEORDERNUMBER_NULL,
    COUNT(CASE WHEN PICKINGCOMPLETEDWHEN IS NULL THEN 1 END) AS count_PICKINGCOMPLETEDWHEN_NULL
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS;

---------------------------------------
--ORDERDATE
---------------------------------------
ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
ADD COLUMN ORDERDATE_DATE DATE;

-- Change to date format for ORDERDATE column
UPDATE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
SET ORDERDATE_DATE = TO_DATE(ORDERDATE, 'DD/MM/YYYY');

SELECT ORDERDATE, ORDERDATE_DATE
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
DROP COLUMN ORDERDATE;

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
RENAME COLUMN ORDERDATE_DATE TO ORDERDATE;


---------------------------------------
-- EXPECTEDDELIVERYDATE
---------------------------------------
ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
ADD COLUMN EXPECTEDDELIVERYDATE_DATE DATE;

-- Change to date format for EXPECTEDDELIVERYDATE column
UPDATE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
SET EXPECTEDDELIVERYDATE_DATE = TO_DATE(EXPECTEDDELIVERYDATE, 'DD/MM/YYYY');

SELECT EXPECTEDDELIVERYDATE, EXPECTEDDELIVERYDATE_DATE
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
DROP COLUMN EXPECTEDDELIVERYDATE;

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
RENAME COLUMN EXPECTEDDELIVERYDATE_DATE TO EXPECTEDDELIVERYDATE;

---------------------------------------
-- PICKINGCOMPLETEDWHEN
---------------------------------------
ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
ADD COLUMN PICKINGCOMPLETEDWHEN_DATE TIMESTAMP;

-- Change to date format for PICKINGCOMPLETEDWHEN column
UPDATE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
SET PICKINGCOMPLETEDWHEN_DATE = TO_TIMESTAMP(PICKINGCOMPLETEDWHEN, 'DD/MM/YYYY HH24:MI');

SELECT PICKINGCOMPLETEDWHEN, PICKINGCOMPLETEDWHEN_DATE
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
DROP COLUMN PICKINGCOMPLETEDWHEN;

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
RENAME COLUMN PICKINGCOMPLETEDWHEN_DATE TO PICKINGCOMPLETEDWHEN;

---------------------------------------
--PICKEDBYPERSONID
---------------------------------------
ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
ADD COLUMN PICKEDBYPERSONID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
SET PICKEDBYPERSONID_NUM = TO_NUMBER(PICKEDBYPERSONID);

SELECT PICKEDBYPERSONID, PICKEDBYPERSONID_NUM
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
DROP COLUMN PICKEDBYPERSONID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
RENAME COLUMN PICKEDBYPERSONID_NUM TO PICKEDBYPERSONID;

--check the number of rows of PICKEDBYPERSONID = 18(random PICKEDBYPERSONID from data), cross checked with excel sheet
SELECT COUNT(*) AS row_count
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS
WHERE PICKEDBYPERSONID = 18;

---------------------------------------
-- CONTACTPERSONID
---------------------------------------
ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
ADD COLUMN CONTACTPERSONID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
SET CONTACTPERSONID_NUM = TO_NUMBER(CONTACTPERSONID);

SELECT CONTACTPERSONID, CONTACTPERSONID_NUM
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
DROP COLUMN CONTACTPERSONID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
RENAME COLUMN CONTACTPERSONID_NUM TO CONTACTPERSONID;

--check the number of rows of CONTACTPERSONID = 3178(random CONTACTPERSONID from data), cross checked with excel sheet
SELECT COUNT(*) AS row_count
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS
WHERE CONTACTPERSONID = 3178;

---------------------------------------
-- SALESPERSONPERSONID
---------------------------------------
ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
ADD COLUMN SALESPERSONPERSONID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
SET SALESPERSONPERSONID_NUM = TO_NUMBER(SALESPERSONPERSONID);

SELECT SALESPERSONPERSONID, SALESPERSONPERSONID_NUM
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
DROP COLUMN SALESPERSONPERSONID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
RENAME COLUMN SALESPERSONPERSONID_NUM TO SALESPERSONPERSONID;

--check the number of rows of SALESPERSONPERSONID = 2(random CONTACTPERSONID from data), cross checked with excel sheet
SELECT COUNT(*) AS row_count
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS
WHERE SALESPERSONPERSONID = 2;


---------------------------------------
--CUSTOMERID
---------------------------------------
ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
ADD COLUMN CUSTOMERID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
SET CUSTOMERID_NUM = TO_NUMBER(CUSTOMERID);

SELECT CUSTOMERID, CUSTOMERID_NUM
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
DROP COLUMN CUSTOMERID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
RENAME COLUMN CUSTOMERID_NUM TO CUSTOMERID;

--check the number of rows of customerid = 832(random customerid from data), cross checked with excel sheet
SELECT COUNT(*) AS row_count
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS
WHERE CUSTOMERID = 832;

---------------------------------------
--ORDERID
---------------------------------------
ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
ADD COLUMN ORDERID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
SET ORDERID_NUM = TO_NUMBER(ORDERID);

SELECT ORDERID, ORDERID_NUM
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
DROP COLUMN ORDERID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
RENAME COLUMN ORDERID_NUM TO ORDERID;

--check the number of rows of ORDERID = 109(random ORDERID from data), cross checked with excel sheet
SELECT COUNT(*) AS row_count
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS
WHERE ORDERID = 109;

---------------------------------------
-- ISUNDERSUPPLYBACKORDERED 
---------------------------------------
ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
ADD COLUMN ISUNDERSUPPLYBACKORDERED_NUM BOOLEAN;

UPDATE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
SET ISUNDERSUPPLYBACKORDERED_NUM = TO_BOOLEAN(ISUNDERSUPPLYBACKORDERED);

SELECT ISUNDERSUPPLYBACKORDERED, ISUNDERSUPPLYBACKORDERED_NUM
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
DROP COLUMN ISUNDERSUPPLYBACKORDERED;

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
RENAME COLUMN ISUNDERSUPPLYBACKORDERED_NUM TO ISUNDERSUPPLYBACKORDERED;


--primary key
ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
ADD CONSTRAINT PK_SALES_ORDERS_ORDERID
PRIMARY KEY (ORDERID);

-- null error handling for primary key (increment 1 to impute null value primary keys from the previous record)
WITH CTE AS (
    SELECT 
        OrderID,
        CustomerID,
        SalespersonPersonID,
        PickedByPersonID,
        ContactPersonID,
        OrderDate,
        ExpectedDeliveryDate,
        CustomerPurchaseOrderNumber,
        IsUndersupplyBackordered,
        PickingCompletedWhen,
        LAG(OrderID) OVER (ORDER BY OrderID) AS prev_orderid,
        ROW_NUMBER() OVER (ORDER BY OrderID) AS row_num
    FROM KN_LOGISTICS.SNOWSQL.Sales_Orders
)
SELECT 
    CustomerID,
    SalespersonPersonID,
    PickedByPersonID,
    ContactPersonID,
    OrderDate,
    ExpectedDeliveryDate,
    CustomerPurchaseOrderNumber,
    IsUndersupplyBackordered,
    PickingCompletedWhen,
    CASE
        WHEN OrderID IS NULL THEN prev_orderid + 1
        ELSE OrderID
    END AS OrderID
FROM CTE
ORDER BY row_num;

-- foreign key
ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
ADD CONSTRAINT FK_Sales_Orders_CustomerID_Sales_Customers
FOREIGN KEY (CustomerID)
REFERENCES KN_LOGISTICS.SNOWSQL.SALES_CUSTOMERS(CustomerID);

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
ADD CONSTRAINT FK_Sales_Orders_ContactPersonID_Application_People
FOREIGN KEY (ContactPersonID)
REFERENCES KN_LOGISTICS.SNOWSQL.APPLICATION_PEOPLE(PersonID);

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
ADD CONSTRAINT FK_Sales_Orders_PickedByPersonID_Application_People
FOREIGN KEY (PickedByPersonID)
REFERENCES KN_LOGISTICS.SNOWSQL.APPLICATION_PEOPLE(PersonID);

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
ADD CONSTRAINT FK_Sales_Orders_SalespersonPersonID_Application_People
FOREIGN KEY (SalespersonPersonID)
REFERENCES KN_LOGISTICS.SNOWSQL.APPLICATION_PEOPLE(PersonID);

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_INVOICES
ADD CONSTRAINT FK_Sales_Invoices_OrderID_Sales_Orders
FOREIGN KEY (OrderID)
REFERENCES KN_LOGISTICS.SNOWSQL.SALES_ORDERS(OrderID);

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERLINES
ADD CONSTRAINT FK_Sales_OrderLines_OrderID_Sales_Orders
FOREIGN KEY (OrderID)
REFERENCES KN_LOGISTICS.SNOWSQL.SALES_ORDERS(OrderID);
