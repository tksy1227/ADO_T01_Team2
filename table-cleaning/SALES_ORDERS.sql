create or replace TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS (
	ORDERID NUMBER(38,0) NOT NULL,
	CUSTOMERID VARCHAR(16777216),
	SALESPERSONPERSONID VARCHAR(20),
	PICKEDBYPERSONID VARCHAR(20),
	CONTACTPERSONID VARCHAR(20),
	BACKORDERORDERID VARCHAR(16777216),
	ORDERDATE VARCHAR(16777216),
	EXPECTEDDELIVERYDATE VARCHAR(16777216),
	CUSTOMERPURCHASEORDERNUMBER VARCHAR(16777216),
	ISUNDERSUPPLYBACKORDERED BOOLEAN,
	PICKINGCOMPLETEDWHEN VARCHAR(16777216),
	constraint PK_SALES_ORDERS primary key (ORDERID),
	constraint FK_SALES_ORDERS_CONTACTPERSONID_APPLICATION_PEOPLE foreign key (CONTACTPERSONID) references KN_LOGISTICS.SNOWSQL.APPLICATION_PEOPLE(PERSONID),
	constraint FK_SALES_ORDERS_PICKEDBYPERSONID_APPLICATION_PEOPLE foreign key (PICKEDBYPERSONID) references KN_LOGISTICS.SNOWSQL.APPLICATION_PEOPLE(PERSONID),
	constraint FK_SALES_ORDERS_SALESPERSONPERSONID_APPLICATION_PEOPLE foreign key (SALESPERSONPERSONID) references KN_LOGISTICS.SNOWSQL.APPLICATION_PEOPLE(PERSONID),
	constraint FK_SALES_ORDERS_CUSTOMERID_SALES_CUSTOMERS foreign key (CUSTOMERID) references KN_LOGISTICS.SNOWSQL.SALES_CUSTOMERS(CUSTOMERID),
  constraint FK_SALES_ORDERS_CONTACTPERSONID_APPLICATION_PEOPLE foreign key (CONTACTPERSONID) references KN_LOGISTICS.SNOWSQL.APPLICATION_PEOPLE(PERSONID),
	constraint FK_SALES_ORDERS_PICKEDBYPERSONID_APPLICATION_PEOPLE foreign key (PICKEDBYPERSONID) references KN_LOGISTICS.SNOWSQL.APPLICATION_PEOPLE(PERSONID),
	constraint FK_SALES_ORDERS_SALESPERSONPERSONID_APPLICATION_PEOPLE foreign key (SALESPERSONPERSONID) references KN_LOGISTICS.SNOWSQL.APPLICATION_PEOPLE(PERSONID)
);

--Drop column BACKORDERORDERID (unneccesary column)
ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
DROP COLUMN BACKORDERORDERID;

-- Total Number of Null values in string 'NULL' for all columns except boolean column (ISUNDERSUPPLYBACKORDERED) and numeric columns
SELECT COUNT(*) FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS
WHERE CUSTOMERID = 'NULL'
OR SALESPERSONPERSONID = 'NULL'
OR PICKEDBYPERSONID = 'NULL'
OR CONTACTPERSONID = 'NULL'
OR ORDERDATE = 'NULL'
OR EXPECTEDDELIVERYDATE = 'NULL'
OR CUSTOMERPURCHASEORDERNUMBER = 'NULL'
OR PICKINGCOMPLETEDWHEN = 'NULL';

-- Total Number of Null values for all columns
SELECT COUNT(*) FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS
WHERE ORDERID IS NULL
OR CUSTOMERID IS NULL
OR SALESPERSONPERSONID IS NULL
OR PICKEDBYPERSONID IS NULL
OR CONTACTPERSONID IS NULL
OR ORDERDATE IS NULL
OR EXPECTEDDELIVERYDATE IS NULL
OR CUSTOMERPURCHASEORDERNUMBER IS NULL
OR PICKINGCOMPLETEDWHEN IS NULL;


-- Null value checks for all columns (only varchar data type columns)
SELECT
    SUM(CASE WHEN CUSTOMERID = 'NULL' THEN 1 ELSE 0 END) AS NULL_COUNT_CUSTOMERID,
    SUM(CASE WHEN SALESPERSONPERSONID = 'NULL' THEN 1 ELSE 0 END) AS NULL_COUNT_SALESPERSONPERSONID,
    SUM(CASE WHEN PICKEDBYPERSONID = 'NULL' THEN 1 ELSE 0 END) AS NULL_COUNT_PICKEDBYPERSONID,
    SUM(CASE WHEN CONTACTPERSONID = 'NULL' THEN 1 ELSE 0 END) AS NULL_COUNT_CONTACTPERSONID,    
    SUM(CASE WHEN ORDERDATE = 'NULL' THEN 1 ELSE 0 END) AS NULL_COUNT_ORDERDATE,
    SUM(CASE WHEN EXPECTEDDELIVERYDATE = 'NULL' THEN 1 ELSE 0 END) AS NULL_COUNT_EXPECTEDDELIVERYDATE,    
    SUM(CASE WHEN CUSTOMERPURCHASEORDERNUMBER = 'NULL' THEN 1 ELSE 0 END) AS NULL_COUNT_CUSTOMERPURCHASEORDERNUMBER,
    SUM(CASE WHEN PICKINGCOMPLETEDWHEN = 'NULL' THEN 1 ELSE 0 END) AS NULL_COUNT_PICKINGCOMPLETEDWHEN
FROM 
    KN_LOGISTICS.SNOWSQL.SALES_ORDERS;
    

-- Null value checks for all columns
SELECT 
    COUNT(CASE WHEN ISUNDERSUPPLYBACKORDERED IS NULL THEN 1 END) AS count_ISUNDERSUPPLYBACKORDERED_NULL,
    COUNT(CASE WHEN ORDERID IS NULL THEN 1 END) AS count_ORDERID_NULL,    
    COUNT(CASE WHEN CUSTOMERID IS NULL THEN 1 END) AS count_CUSTOMERID_NULL,
    COUNT(CASE WHEN SALESPERSONPERSONID IS NULL THEN 1 END) AS count_SALESPERSONPERSONID_NULL,
    COUNT(CASE WHEN PICKEDBYPERSONID IS NULL THEN 1 END) AS count_PICKEDBYPERSONID_NULL,
    COUNT(CASE WHEN CONTACTPERSONID IS NULL THEN 1 END) AS count_CONTACTPERSONID_NULL,    
    COUNT(CASE WHEN ORDERDATE IS NULL THEN 1 END) AS count_ORDERDATE_NULL,
    COUNT(CASE WHEN EXPECTEDDELIVERYDATE IS NULL THEN 1 END) AS count_EXPECTEDDELIVERYDATE_NULL,    
    COUNT(CASE WHEN CUSTOMERPURCHASEORDERNUMBER IS NULL THEN 1 END) AS count_CUSTOMERPURCHASEORDERNUMBER_NULL,
    COUNT(CASE WHEN PICKINGCOMPLETEDWHEN IS NULL THEN 1 END) AS count_PICKINGCOMPLETEDWHEN_NULL
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS;

-- Duplicated rows
SELECT ORDERID, COUNT(*) AS count
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS
GROUP BY ORDERID
HAVING COUNT(*) > 1;


-- Handle remaining NULL values in INVOICEID
UPDATE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
SET PICKEDBYPERSONID = NULL -- oTHERS
WHERE PICKEDBYPERSONID = 'NULL';

-- Check 10 rows of the whole table after updating the data type
SELECT * FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS;



--ORDERDATE
ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
ADD COLUMN ORDERDATE_DATE DATE;

-- Change to date format for ORDERDATE column
UPDATE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
SET ORDERDATE_DATE = TO_DATE(ORDERDATE, 'DD/MM/YYYY');

SELECT ORDERDATE, ORDERDATE_DATE
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
DROP COLUMN ORDERDATE;

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
RENAME COLUMN ORDERDATE_DATE TO ORDERDATE;

-- Check 10 rows of ORDERDATE after updating the data type
SELECT ORDERDATE FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS LIMIT 10;

-- Check 10 rows of the whole table after updating the data type
SELECT * FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS;




-- EXPECTEDDELIVERYDATE
ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
ADD COLUMN EXPECTEDDELIVERYDATE_DATE DATE;

-- Change to date format for ORDERDATE column
UPDATE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
SET EXPECTEDDELIVERYDATE_DATE = TO_DATE(EXPECTEDDELIVERYDATE, 'DD/MM/YYYY');

SELECT EXPECTEDDELIVERYDATE, EXPECTEDDELIVERYDATE_DATE
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
DROP COLUMN EXPECTEDDELIVERYDATE;

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
RENAME COLUMN EXPECTEDDELIVERYDATE_DATE TO EXPECTEDDELIVERYDATE;

-- Check 10 rows of EXPECTEDDELIVERYDATE after updating the data type
SELECT EXPECTEDDELIVERYDATE FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS LIMIT 10;

-- Check 10 rows of the whole table after updating the data type
SELECT * FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS;




-- PICKINGCOMPLETEDWHEN
ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
ADD COLUMN PICKINGCOMPLETEDWHEN_DATE TIMESTAMP;

-- Change to date format for ORDERDATE column
UPDATE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
SET PICKINGCOMPLETEDWHEN_DATE = TO_TIMESTAMP(PICKINGCOMPLETEDWHEN, 'DD/MM/YYYY HH24:MI');

SELECT PICKINGCOMPLETEDWHEN, PICKINGCOMPLETEDWHEN_DATE
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
DROP COLUMN PICKINGCOMPLETEDWHEN;

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
RENAME COLUMN PICKINGCOMPLETEDWHEN_DATE TO PICKINGCOMPLETEDWHEN;

// Check 10 rows of PICKINGCOMPLETEDWHEN after updating the data type
SELECT PICKINGCOMPLETEDWHEN FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS LIMIT 10;

// Check 10 rows of the whole table after updating the data type
SELECT * FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS;


--PICKEDBYPERSONID
ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
ADD COLUMN PICKEDBYPERSONID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
SET PICKEDBYPERSONID_NUM = TO_NUMBER(PICKEDBYPERSONID);

SELECT PICKEDBYPERSONID, PICKEDBYPERSONID_NUM
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
DROP COLUMN PICKEDBYPERSONID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
RENAME COLUMN PICKEDBYPERSONID_NUM TO PICKEDBYPERSONID;

// Check 10 rows of SUPPLIERID after updating the data type
SELECT PICKEDBYPERSONID FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS LIMIT 10;

// Check 10 rows of the whole table after updating the data type
SELECT * FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS;

SELECT *
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS
WHERE PICKEDBYPERSONID = 18;

//check the number of rows of PICKEDBYPERSONID = 18(random PICKEDBYPERSONID from data), cross checked with excel sheet
SELECT COUNT(*) AS row_count
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS
WHERE PICKEDBYPERSONID = 18;



// CONTACTPERSONID
ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
ADD COLUMN CONTACTPERSONID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
SET CONTACTPERSONID_NUM = TO_NUMBER(CONTACTPERSONID);

SELECT CONTACTPERSONID, CONTACTPERSONID_NUM
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
DROP COLUMN CONTACTPERSONID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
RENAME COLUMN CONTACTPERSONID_NUM TO CONTACTPERSONID;

// Check 10 rows of SUPPLIERID after updating the data type
SELECT CONTACTPERSONID FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS LIMIT 10;

// Check 10 rows of the whole table after updating the data type
SELECT * FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS;

SELECT *
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS
WHERE CONTACTPERSONID = 3178;

//check the number of rows of CONTACTPERSONID = 2(random CONTACTPERSONID from data), cross checked with excel sheet
SELECT COUNT(*) AS row_count
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS
WHERE CONTACTPERSONID = 3178;




// SALESPERSONPERSONID
ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
ADD COLUMN SALESPERSONPERSONID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
SET SALESPERSONPERSONID_NUM = TO_NUMBER(SALESPERSONPERSONID);

SELECT SALESPERSONPERSONID, SALESPERSONPERSONID_NUM
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
DROP COLUMN SALESPERSONPERSONID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
RENAME COLUMN SALESPERSONPERSONID_NUM TO SALESPERSONPERSONID;

// Check 10 rows of SUPPLIERID after updating the data type
SELECT SALESPERSONPERSONID FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS LIMIT 10;

// Check 10 rows of the whole table after updating the data type
SELECT * FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS;

SELECT *
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS
WHERE SALESPERSONPERSONID = 8;

//check the number of rows of CONTACTPERSONID = 2(random CONTACTPERSONID from data), cross checked with excel sheet
SELECT COUNT(*) AS row_count
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS
WHERE SALESPERSONPERSONID = 8;



//CUSTOMERID
ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
ADD COLUMN CUSTOMERID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
SET CUSTOMERID_NUM = TO_NUMBER(CUSTOMERID);

SELECT CUSTOMERID, CUSTOMERID_NUM
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS;

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
DROP COLUMN CUSTOMERID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
RENAME COLUMN CUSTOMERID_NUM TO CUSTOMERID;

// Check 10 rows of CUSTOMERID after updating the data type
SELECT CUSTOMERID FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS LIMIT 10;

// Check 10 rows of the whole table after updating the data type
SELECT * FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS;

SELECT *
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS
WHERE CUSTOMERID = 8;

//check the number of rows of customerid = 832(random customerid from data), cross checked with excel sheet
SELECT COUNT(*) AS row_count
FROM KN_LOGISTICS.SNOWSQL.SALES_ORDERS
WHERE CUSTOMERID = 8;


-- foreign keys
ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
ADD CONSTRAINT FK_Sales_Orders_CustomerID_Sales_Customers
FOREIGN KEY (CustomerID)
REFERENCES KN_LOGISTICS.SNOWSQL.SALES_CUSTOMERS(CustomerID);

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
ADD CONSTRAINT FK_Sales_Orders_ContactPersonID_Application_People
FOREIGN KEY (ContactPersonID)
REFERENCES KN_LOGISTICS.SNOWSQL.APPLICATION_PEOPLE(PersonID);

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
ADD CONSTRAINT FK_Sales_Orders_PickedByPersonID_Application_People
FOREIGN KEY (PickedByPersonID)
REFERENCES KN_LOGISTICS.SNOWSQL.APPLICATION_PEOPLE(PersonID);

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERS
ADD CONSTRAINT FK_Sales_Orders_SalespersonPersonID_Application_People
FOREIGN KEY (SalespersonPersonID)
REFERENCES KN_LOGISTICS.SNOWSQL.APPLICATION_PEOPLE(PersonID);

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_INVOICES
ADD CONSTRAINT FK_Sales_Invoices_OrderID_Sales_Orders
FOREIGN KEY (OrderID)
REFERENCES KN_LOGISTICS.SNOWSQL.SALES_ORDERS(OrderID);

ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_ORDERLINES
ADD CONSTRAINT FK_Sales_OrderLines_OrderID_Sales_Orders
FOREIGN KEY (OrderID)
REFERENCES KN_LOGISTICS.SNOWSQL.SALES_ORDERS(OrderID);



SELECT 
    o.OrderID,
    o.OrderDate,
    o.CustomerID,
    c.CustomerName,
    o.ContactPersonID,
    o.PickedByPersonID,
    o.SalespersonPersonID,
    i.InvoiceID,
    ol.OrderLineID,
    ol.PickedQuantity,
    ol.Quantity
FROM 
    KN_LOGISTICS.SNOWSQL.Sales_Orders AS o
INNER JOIN 
    KN_LOGISTICS.SNOWSQL.Sales_Customers AS c ON o.CustomerID = c.CustomerID
LEFT JOIN 
    KN_LOGISTICS.SNOWSQL.Application_People AS cp1 ON o.ContactPersonID = cp1.PersonID
LEFT JOIN 
    KN_LOGISTICS.SNOWSQL.Application_People AS cp2 ON o.PickedByPersonID = cp2.PersonID
LEFT JOIN 
    KN_LOGISTICS.SNOWSQL.Application_People AS cp3 ON o.SalespersonPersonID = cp3.PersonID
LEFT JOIN 
    KN_LOGISTICS.SNOWSQL.Sales_Invoices AS i ON o.OrderID = i.OrderID
LEFT JOIN 
    KN_LOGISTICS.SNOWSQL.Sales_OrderLines AS ol ON o.OrderID = ol.OrderID;
