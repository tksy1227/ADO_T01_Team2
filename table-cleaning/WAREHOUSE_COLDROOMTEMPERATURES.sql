-- Create a clean table with the same structure as the raw table
CREATE OR REPLACE TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_COLDROOMTEMPERATURES AS
SELECT
  CAST(CASE WHEN COLDROOMTEMPERATUREID = 'NULL' THEN NULL ELSE COLDROOMTEMPERATUREID END AS VARCHAR(38)) AS COLDROOMTEMPERATUREID,
  CAST(CASE WHEN COLDROOMSENSORNUMBER = 'NULL' THEN NULL ELSE COLDROOMSENSORNUMBER END AS VARCHAR(38)) AS COLDROOMSENSORNUMBER,
  CAST(CASE WHEN RECORDEDWHEN = 'NULL' THEN NULL ELSE RECORDEDWHEN END AS VARCHAR(25)) AS RECORDEDWHEN,
  CAST(CASE WHEN TEMPERATURE = 'NULL' THEN NULL ELSE TEMPERATURE END AS VARCHAR(38)) AS TEMPERATURE
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_COLDROOMTEMPERATURES_RAW;

-- Verify the clean table
SELECT *
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_COLDROOMTEMPERATURES;

-----------------------------------------------
-- Conversion of data types in table
-----------------------------------------------

--------------------------------------------------
// data type conversion (to timestamp)
--------------------------------------------------
// TRANSACTIONOCCURREDWHEN
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_COLDROOMTEMPERATURES
ADD COLUMN RECORDEDWHEN_T TIMESTAMP;

// Change to date format for ORDERDATE column
UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_COLDROOMTEMPERATURES
SET RECORDEDWHEN_T = TO_TIMESTAMP(RECORDEDWHEN, 'DD/MM/YYYY HH24:MI');

SELECT RECORDEDWHEN, RECORDEDWHEN_T
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_COLDROOMTEMPERATURES;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_COLDROOMTEMPERATURES
DROP COLUMN RECORDEDWHEN;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_COLDROOMTEMPERATURES
RENAME COLUMN RECORDEDWHEN_T TO RECORDEDWHEN;

// Check 10 rows of the whole table after updating the data type
SELECT * FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_COLDROOMTEMPERATURES;


//COLDROOMTEMPERATUREID
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_COLDROOMTEMPERATURES
ADD COLUMN COLDROOMTEMPERATUREID_NUMBER NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_COLDROOMTEMPERATURES
SET COLDROOMTEMPERATUREID_NUMBER = TO_NUMBER(COLDROOMTEMPERATUREID);

SELECT COLDROOMTEMPERATUREID, COLDROOMTEMPERATUREID_NUMBER
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_COLDROOMTEMPERATURES;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_COLDROOMTEMPERATURES
DROP COLUMN COLDROOMTEMPERATUREID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_COLDROOMTEMPERATURES
RENAME COLUMN COLDROOMTEMPERATUREID_NUMBER TO COLDROOMTEMPERATUREID;

//COLDROOMTEMPERATURES
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_COLDROOMTEMPERATURES
ADD COLUMN COLDROOMSENSORNUMBER_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_COLDROOMTEMPERATURES
SET COLDROOMSENSORNUMBER_NUM = TO_NUMBER(COLDROOMSENSORNUMBER);

SELECT COLDROOMSENSORNUMBER_NUM, COLDROOMSENSORNUMBER
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_COLDROOMTEMPERATURES;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_COLDROOMTEMPERATURES
DROP COLUMN COLDROOMSENSORNUMBER;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_COLDROOMTEMPERATURES
RENAME COLUMN COLDROOMSENSORNUMBER_NUM TO COLDROOMSENSORNUMBER;

//TEMPERATURE 
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_COLDROOMTEMPERATURES
ADD COLUMN TEMPERATURE_FLOAT FLOAT;

UPDATE KN_LOGISTICS.SNOWSQL.WAREHOUSE_COLDROOMTEMPERATURES
SET TEMPERATURE_FLOAT = CAST(TEMPERATURE AS FLOAT);

SELECT TEMPERATURE_FLOAT, TEMPERATURE
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_COLDROOMTEMPERATURES;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_COLDROOMTEMPERATURES
DROP COLUMN TEMPERATURE;

ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_COLDROOMTEMPERATURES
RENAME COLUMN TEMPERATURE_FLOAT TO TEMPERATURE;


-- Select the transformed data for verification
SELECT 
    COLDROOMTEMPERATUREID,
    COLDROOMSENSORNUMBER,
    RECORDEDWHEN,
    TEMPERATURE
FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_COLDROOMTEMPERATURES
LIMIT 10;

--------------------------------------------
-- Adding of primary key to table
--------------------------------------------
ALTER TABLE KN_LOGISTICS.SNOWSQL.WAREHOUSE_COLDROOMTEMPERATURES
ADD CONSTRAINT PK_WAREHOUSE_COLDROOMTEMPERATURES_COLDROOMTEMPERATUREID
PRIMARY KEY (COLDROOMTEMPERATUREID);

-------------------------------------------------------
-- ERROR HANDLING
-------------------------------------------------------
WITH CTE AS (
    SELECT 
        COLDROOMTEMPERATUREID,
        COLDROOMSENSORNUMBER,
        RECORDEDWHEN,
        TEMPERATURE,
        LAG(COLDROOMTEMPERATUREID) OVER (ORDER BY COLDROOMTEMPERATUREID) AS prev_coldroomtemperatureid,
        ROW_NUMBER() OVER (ORDER BY COLDROOMTEMPERATUREID) AS row_num
    FROM KN_LOGISTICS.SNOWSQL.WAREHOUSE_COLDROOMTEMPERATURES
)
SELECT 
    COLDROOMSENSORNUMBER,
    RECORDEDWHEN,
    TEMPERATURE,
    CASE
        WHEN COLDROOMTEMPERATUREID IS NULL THEN prev_coldroomtemperatureid + 1
        ELSE COLDROOMTEMPERATUREID
    END AS COLDROOMTEMPERATUREID
FROM CTE
ORDER BY row_num;


-------------------------------------------------------
--Adding of foreign key to table
-------------------------------------------------------
-- THERE ARE NO FOREIGN KEYS IN THIS TABLE

