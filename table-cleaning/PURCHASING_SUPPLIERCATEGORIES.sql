-- Create a clean table with the same structure as the raw table
CREATE OR REPLACE TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_SUPPLIERCATEGORIES AS
SELECT
  CAST(CASE WHEN SUPPLIERCATEGORYID = 'NULL' THEN NULL ELSE SUPPLIERCATEGORYID END AS VARCHAR(38)) AS SUPPLIERCATEGORYID,
  CAST(CASE WHEN SUPPLIERCATEGORYNAME = 'NULL' THEN NULL ELSE SUPPLIERCATEGORYNAME END AS VARCHAR(50)) AS SUPPLIERCATEGORYNAME
FROM KN_LOGISTICS.SNOWSQL.PURCHASING_SUPPLIERCATEGORIES_RAW;

-- Total Number of Null values for all columns
SELECT COUNT(*) FROM KN_LOGISTICS.SNOWSQL.PURCHASING_SUPPLIERCATEGORIES
WHERE SUPPLIERCATEGORYID IS NULL
OR SUPPLIERCATEGORYNAME IS NULL;
    
-- Null value checks for all columns (only numeric/boolean data type columns)
SELECT 
    COUNT(CASE WHEN SUPPLIERCATEGORYID IS NULL THEN 1 END) AS count_SUPPLIERCATEGORYID_NULL,
    COUNT(CASE WHEN SUPPLIERCATEGORYNAME IS NULL THEN 1 END) AS count_SUPPLIERCATEGORYNAME_NULL
FROM KN_LOGISTICS.SNOWSQL.PURCHASING_SUPPLIERCATEGORIES;


-- data type conversion (to number) SUPPLIERCATEGORYID 

ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_SUPPLIERCATEGORIES
ADD COLUMN SUPPLIERCATEGORYID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.PURCHASING_SUPPLIERCATEGORIES
SET SUPPLIERCATEGORYID_NUM = TO_NUMBER(SUPPLIERCATEGORYID);

SELECT SUPPLIERCATEGORYID, SUPPLIERCATEGORYID_NUM
FROM KN_LOGISTICS.SNOWSQL.PURCHASING_SUPPLIERCATEGORIES;

ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_SUPPLIERCATEGORIES
DROP COLUMN SUPPLIERCATEGORYID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_SUPPLIERCATEGORIES
RENAME COLUMN SUPPLIERCATEGORYID_NUM TO SUPPLIERCATEGORYID;


-- primary key
ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_SUPPLIERCATEGORIES
ADD CONSTRAINT PK_PURCHASING_SUPPLIERCATEGORIES_SUPPLIERCATEGORYID
PRIMARY KEY (SUPPLIERCATEGORYID);

-- unique key
ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_SUPPLIERCATEGORIES
ADD CONSTRAINT UK_PURCHASING_SUPPLIERCATEGORIES_SUPPLIERCATEGORYNAME
UNIQUE (SUPPLIERCATEGORYNAME);


-- null error handling for primary key (increment 1 to impute null value primary keys from the previous record)
WITH CTE AS (
    SELECT
        SUPPLIERCATEGORYID,
        SUPPLIERCATEGORYNAME,
        LAG(SUPPLIERCATEGORYID) OVER (ORDER BY SUPPLIERCATEGORYID) AS prev_SUPPLIERCATEGORYID,
        ROW_NUMBER() OVER (ORDER BY SUPPLIERCATEGORYID) AS row_num
    FROM KN_LOGISTICS.SNOWSQL.PURCHASING_SUPPLIERCATEGORIES
)
SELECT 
    SUPPLIERCATEGORYNAME,
    CASE
        WHEN SUPPLIERCATEGORYID IS NULL THEN prev_SUPPLIERCATEGORYID + 1
        ELSE SUPPLIERCATEGORYID
    END AS SUPPLIERCATEGORYID
FROM CTE
ORDER BY row_num;

-- foreign key
ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_Suppliers
ADD CONSTRAINT FK_Purchasing_Suppliers_SupplierCategoryID_Purchasing_SupplierCategories
FOREIGN KEY (SupplierCategoryID)
REFERENCES KN_LOGISTICS.SNOWSQL.PURCHASING_SUPPLIERCATEGORIES(SupplierCategoryID);
