CREATE OR REPLACE TABLE KN_LOGISTICS.SNOWSQL.SALES_CUSTOMERCATEGORIES AS
SELECT
  CAST(CASE WHEN CUSTOMERCATEGORYID = 'NULL' THEN NULL ELSE CUSTOMERCATEGORYID END AS VARCHAR(38)) AS CUSTOMERCATEGORYID,
  CAST(CASE WHEN CUSTOMERCATEGORYNAME = 'NULL' THEN NULL ELSE CUSTOMERCATEGORYNAME END AS VARCHAR(50)) AS CUSTOMERCATEGORYNAME
FROM KN_LOGISTICS.SNOWSQL.SALES_CUSTOMERCATEGORIES_RAW;

----------------------------
--Conversion of datatype
----------------------------
---------------------CUSTOMERCATEGORYID------------------------
-- Add a new column for CUSTOMERCATEGORYID with NUMBER(38,0)
ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_CUSTOMERCATEGORIES
ADD COLUMN CUSTOMERCATEGORYID_NUM NUMBER(38,0);

-- Populate the new column with converted values
UPDATE KN_LOGISTICS.SNOWSQL.SALES_CUSTOMERCATEGORIES
SET CUSTOMERCATEGORYID_NUM = CAST(CUSTOMERCATEGORYID AS NUMBER(38,0));

-- Verify the conversion
SELECT CUSTOMERCATEGORYID, CUSTOMERCATEGORYID_NUM
FROM KN_LOGISTICS.SNOWSQL.SALES_CUSTOMERCATEGORIES
LIMIT 10;

-- Drop the old CUSTOMERCATEGORYID column
ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_CUSTOMERCATEGORIES
DROP COLUMN CUSTOMERCATEGORYID;

-- Rename the new column to the original column name
ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_CUSTOMERCATEGORIES
RENAME COLUMN CUSTOMERCATEGORYID_NUM TO CUSTOMERCATEGORYID;

-------------------------------------
--Adding primary key to table
-------------------------------------
ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_CUSTOMERCATEGORIES
ADD CONSTRAINT PK_SALES_CUSTOMERCATEGORIES_CUSTOMERCATEGORYID
PRIMARY KEY (CUSTOMERCATEGORYID);

-------------------------------------
--Adding unique key to table
-------------------------------------
ALTER TABLE KN_LOGISTICS.SNOWSQL.SALES_CUSTOMERCATEGORIES
ADD CONSTRAINT UK_SALES_CUSTOMERCATEGORIES_CUSTOMERCATEGORYNAME
UNIQUE (CUSTOMERCATEGORYNAME);


------------------------------------------------
--ERROR HANDLING
------------------------------------------------

WITH CTE AS (
    SELECT 
        CUSTOMERCATEGORYID, 
        CUSTOMERCATEGORYNAME,
        LAG(CUSTOMERCATEGORYID) OVER (ORDER BY CUSTOMERCATEGORYID) AS prev_customercategoryid,
        ROW_NUMBER() OVER (ORDER BY CUSTOMERCATEGORYID) AS row_num
    FROM KN_LOGISTICS.SNOWSQL.SALES_CUSTOMERCATEGORIES
)
SELECT  
        CUSTOMERCATEGORYNAME,
    CASE
        WHEN CUSTOMERCATEGORYID IS NULL THEN prev_customercategoryid + 1
        ELSE CUSTOMERCATEGORYID
    END AS CUSTOMERCATEGORYID
FROM CTE
ORDER BY row_num;

-----------------------------------------------
--Adding of foreign keys to table
-----------------------------------------------
-- THERE ARE NO FOREIGN KEYS IN THIS TABLE
