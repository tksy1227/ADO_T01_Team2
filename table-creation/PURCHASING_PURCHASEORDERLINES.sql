create or replace TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERLINES (
	PURCHASEORDERLINEID NUMBER(38,0) NOT NULL,
	PURCHASEORDERID VARCHAR(20),
	STOCKITEMID NUMBER(38,0),
	ORDEREDOUTERS NUMBER(38,0),
	DESCRIPTION VARCHAR(16777216),
	RECEIVEDOUTERS NUMBER(38,0),
	PACKAGETYPEID NUMBER(38,0),
	EXPECTEDUNITPRICEPEROUTER FLOAT,
	LASTRECEIPTDATE VARCHAR(20),
	ISORDERLINEFINALIZED BOOLEAN,
	primary key (PURCHASEORDERLINEID),
	constraint FK_PURCHASEORDERLINES_PACKAGETYPEID foreign key (PACKAGETYPEID) references KN_LOGISTICS.SNOWSQL.WAREHOUSE_PACKAGETYPES(PACKAGETYPEID)
);


// Change to date format for LASTRECEIPTDATE column
UPDATE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERLINES
SET LASTRECEIPTDATE = TO_DATE(LASTRECEIPTDATE, 'DD/MM/YYYY')
WHERE LASTRECEIPTDATE IS NOT NULL;


// Check 10 rows of TRANSACTIONOCCURREDWHEN after updating the data type
SELECT LASTRECEIPTDATE FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERLINES LIMIT 10;

// Check 10 rows of the whole table after updating the data type
SELECT * FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERLINES LIMIT 10;

-- Adding purchaseorderid and stockitem FK

ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERLINES
ADD CONSTRAINT FK_PURCHASEORDERLINES_PURCHASEORDERID
FOREIGN KEY (PURCHASEORDERID)
REFERENCES KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERS (PURCHASEORDERID);

ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERLINES
ADD CONSTRAINT FK_PURCHASEORDERLINES_STOCKITEMID
FOREIGN KEY (STOCKITEMID)
REFERENCES KN_LOGISTICS.SNOWSQL.WAREHOUSE_STOCKITEMS (STOCKITEMID);


-- Checking for duplicates
-- Use ROW_NUMBER() window function to identify duplicates and rename cleaned table to KN_LOGISTICS.SNOWSQL.(your_table)_CLEAN
SELECT 
    'PURCHASEORDERLINEID' AS COLUMN_NAME, 
    PURCHASEORDERLINEID AS DUPLICATE_VALUE, 
    COUNT(*) AS DUPLICATE_COUNT
FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERLINES
GROUP BY PURCHASEORDERLINEID
HAVING COUNT(*) > 1
-- NO DUPLICATES



-- Repeat for other columns that must be unique

-- Sample Code:

CREATE OR REPLACE TABLE ORDERS_CLEAN AS
SELECT *
FROM (
SELECT
*,
ROW_NUMBER() OVER (PARTITION BY ORDER_ID ORDER BY ORDER_DATE DESC) AS RN
FROM ORDERS_RAW
)
WHERE RN = 1;


-- CHecking for NULL










-- change purchaseorderid to number

ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERLINES
ADD COLUMN PURCHASEORDERID_NUM NUMBER(38,0);

UPDATE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERLINES
SET PURCHASEORDERID_NUM = TO_NUMBER(PURCHASEORDERID);

SELECT PURCHASEORDERID, PURCHASEORDERID_NUM
FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERLINES;

ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERLINES
DROP COLUMN PURCHASEORDERID;

ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERLINES
RENAME COLUMN PURCHASEORDERID_NUM TO PURCHASEORDERID;




--------------------------------------------------
// data type conversion (to date) LASTRECEIPTDATE 
--------------------------------------------------
ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERLINES
ADD COLUMN LASTRECEIPTDATE_DATE DATE;

// Change to date format for ORDERDATE column
UPDATE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERLINES
SET LASTRECEIPTDATE_DATE = TO_DATE(LASTRECEIPTDATE);

SELECT LASTRECEIPTDATE, LASTRECEIPTDATE_DATE
FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERLINES;

ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERLINES
DROP COLUMN LASTRECEIPTDATE;

ALTER TABLE KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERLINES
RENAME COLUMN LASTRECEIPTDATE_DATE TO LASTRECEIPTDATE;


SELECT * FROM KN_LOGISTICS.SNOWSQL.PURCHASING_PURCHASEORDERLINES LIMIT 10;

